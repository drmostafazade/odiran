cat > complete_odoo18_install.sh << 'EOF'
#!/bin/bash

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_question() {
    echo -e "${BLUE}[QUESTION]${NC} $1"
}

print_status "=== Odoo 18 Enterprise Complete Installation ==="

# Interactive configuration
print_question "How do you want to access Odoo?"
echo "1) IP address only (http://your-ip:8069)"
echo "2) Domain name with SSL (https://your-domain.com)"
echo "3) Both IP and domain with SSL"
read -p "Enter your choice (1/2/3): " ACCESS_TYPE

if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
    read -p "Enter your domain name (e.g., yourdomain.com): " DOMAIN_NAME
    read -p "Enter your email for SSL certificate: " SSL_EMAIL
    
    if [[ -z "$DOMAIN_NAME" || -z "$SSL_EMAIL" ]]; then
        print_error "Domain name and email are required for SSL setup!"
        exit 1
    fi
fi

# Get server IP
SERVER_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip)
print_status "Detected server IP: $SERVER_IP"

# 1. Update system
print_status "Updating system packages..."
apt update && apt upgrade -y

# 2. Install dependencies
print_status "Installing system dependencies..."
apt install -y wget git python3 python3-pip python3-dev python3-venv \
    python3-wheel libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev \
    libtiff5-dev libjpeg8-dev libopenjp2-7-dev zlib1g-dev libfreetype6-dev \
    liblcms2-dev libwebp-dev libharfbuzz-dev libfribidi-dev libxcb1-dev \
    libpq-dev build-essential libssl-dev libffi-dev curl unzip nginx \
    software-properties-common

# 3. Install PostgreSQL
print_status "Installing PostgreSQL..."
apt install -y postgresql postgresql-client postgresql-contrib
systemctl start postgresql
systemctl enable postgresql

# Configure PostgreSQL for better performance
print_status "Optimizing PostgreSQL configuration..."
su - postgres -c "psql -c \"ALTER SYSTEM SET shared_buffers = '256MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET effective_cache_size = '1GB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET maintenance_work_mem = '64MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET checkpoint_completion_target = 0.9;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET wal_buffers = '16MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET default_statistics_target = 100;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET random_page_cost = 1.1;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET effective_io_concurrency = 200;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET max_connections = 200;\""
systemctl restart postgresql

# 4. Create PostgreSQL user
print_status "Creating PostgreSQL user..."
su - postgres -c "psql -c \"DROP USER IF EXISTS odoo18e;\"" 2>/dev/null || true
su - postgres -c "psql -c \"CREATE USER odoo18e WITH CREATEDB SUPERUSER;\""
su - postgres -c "psql -c \"ALTER USER odoo18e PASSWORD 'odoo123';\""

# 5. Remove existing odoo user and recreate
print_status "Creating system user..."
deluser odoo 2>/dev/null || true
delgroup odoo 2>/dev/null || true
adduser --system --home=/opt/odoo --group odoo

# 6. Clean and create directories
print_status "Setting up directories..."
rm -rf /opt/odoo18-enterprise
mkdir -p /opt/odoo18-enterprise
mkdir -p /var/log/odoo
mkdir -p /etc/odoo

# 7. Download source code
print_status "Downloading Odoo from https://github.com/drmostafazade/odiran"
git clone https://github.com/drmostafazade/odiran.git /opt/odoo18-enterprise/odoo

# Create additional directories
mkdir -p /opt/odoo18-enterprise/addons_manatra
mkdir -p /opt/odoo18-enterprise/data
mkdir -p /opt/odoo18-enterprise/backups

# 8. Set permissions
print_status "Setting permissions..."
chown -R odoo:odoo /opt/odoo18-enterprise
chown odoo:root /var/log/odoo
chown odoo:root /etc/odoo

# 9. Create requirements.txt
print_status "Creating requirements.txt..."
cat > /opt/odoo18-enterprise/odoo/requirements.txt <<EOL
Babel==2.14.0
chardet==5.2.0
cryptography==41.0.7
decorator==5.1.1
docutils==0.20.1
ebaysdk==2.1.5
freezegun==1.2.2
gevent==23.9.1
greenlet==3.0.1
idna==3.4
Jinja2==3.1.2
libsass==0.22.0
lxml==4.9.3
MarkupSafe==2.1.3
num2words==0.5.13
ofxparse==0.21
passlib==1.7.4
Pillow==10.1.0
polib==1.2.0
psutil==5.9.6
psycopg2-binary==2.9.8
pydot==1.4.2
pyOpenSSL==23.3.0
pypdf2==3.0.1
pyserial==3.5
python-dateutil==2.8.2
python-stdnum==1.19
pytz==2023.3
pyusb==1.2.1
qrcode==7.4.2
reportlab==4.0.7
requests==2.31.0
urllib3==2.0.7
vobject==0.9.6.1
werkzeug==2.3.7
xlrd==2.0.1
XlsxWriter==3.1.9
xlwt==1.3.0
zeep==4.2.1
EOL

chown odoo:odoo /opt/odoo18-enterprise/odoo/requirements.txt

# 10. Create virtual environment
print_status "Creating virtual environment..."
su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise && python3 -m venv odoo-venv"

# 11. Install Python packages
print_status "Installing Python packages..."
su - odoo -s /bin/bash -c "/opt/odoo18-enterprise/odoo-venv/bin/pip install --upgrade pip"
su - odoo -s /bin/bash -c "/opt/odoo18-enterprise/odoo-venv/bin/pip install -r /opt/odoo18-enterprise/odoo/requirements.txt"

# 12. Install Odoo in development mode
print_status "Installing Odoo in development mode..."
cd /opt/odoo18-enterprise/odoo
su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && /opt/odoo18-enterprise/odoo-venv/bin/pip install -e ."

# 13. Install wkhtmltopdf
print_status "Installing wkhtmltopdf..."
cd /tmp
wget -q https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-3/wkhtmltox_0.12.6.1-3.jammy_amd64.deb
dpkg -i wkhtmltox_0.12.6.1-3.jammy_amd64.deb 2>/dev/null || true
apt-get install -f -y

# 14. Install Node.js
print_status "Installing Node.js..."
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs
npm install -g rtlcss

# 15. Download and prepare database
print_status "Downloading database backup..."
cd /opt/odoo18-enterprise/backups
wget -O db2_2025-06-30_16-36-33.zip https://github.com/drmostafazade/odiran/raw/main/db2_2025-06-30_16-36-33.zip
unzip -o db2_2025-06-30_16-36-33.zip
DB_FILE=$(find /opt/odoo18-enterprise/backups -name "*.sql" -o -name "*.dump" | head -1)
chown -R odoo:odoo /opt/odoo18-enterprise/backups

# 16. Configure Odoo
print_status "Configuring Odoo..."

# Detect addons path
if [ -d /opt/odoo18-enterprise/odoo/enterprise ]; then
    ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/enterprise,/opt/odoo18-enterprise/odoo/addons"
elif [ -d /opt/odoo18-enterprise/odoo/odoo/addons ]; then
    ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/odoo/addons"
else
    ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/addons"
fi

# Create config with optimized settings
cat > /etc/odoo/odoo.conf <<EOL
[options]
admin_passwd = 5011700
db_host = localhost
db_port = 5432
db_user = odoo18e
db_password = odoo123
addons_path = $ADDONS_PATH
data_dir = /opt/odoo18-enterprise/data
logfile = /var/log/odoo/odoo.log
log_level = info
xmlrpc_port = 8069
workers = 4
max_cron_threads = 2
limit_memory_soft = 2147483648
limit_memory_hard = 2684354560
limit_time_cpu = 600
limit_time_real = 1200
limit_request = 8192
db_maxconn = 64
proxy_mode = True
EOL

chown odoo:odoo /etc/odoo/odoo.conf
chmod 640 /etc/odoo/odoo.conf

# 17. Test execution method
print_status "Testing execution method..."
cd /opt/odoo18-enterprise/odoo

if su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && /opt/odoo18-enterprise/odoo-venv/bin/python odoo-bin --help" >/dev/null 2>&1; then
    EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python /opt/odoo18-enterprise/odoo/odoo-bin"
    WORK_DIR="/opt/odoo18-enterprise/odoo"
    ENV_VARS=""
elif su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && PYTHONPATH=/opt/odoo18-enterprise/odoo /opt/odoo18-enterprise/odoo-venv/bin/python odoo-bin --help" >/dev/null 2>&1; then
    EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python /opt/odoo18-enterprise/odoo/odoo-bin"
    WORK_DIR="/opt/odoo18-enterprise/odoo"
    ENV_VARS="Environment=PYTHONPATH=/opt/odoo18-enterprise/odoo"
elif su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && /opt/odoo18-enterprise/odoo-venv/bin/python -m odoo --help" >/dev/null 2>&1; then
    EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python -m odoo"
    WORK_DIR="/opt/odoo18-enterprise/odoo"
    ENV_VARS="Environment=PYTHONPATH=/opt/odoo18-enterprise/odoo"
else
    print_error "No execution method works!"
    exit 1
fi

# 18. Create systemd service
print_status "Creating systemd service..."
cat > /etc/systemd/system/odoo.service <<EOL
[Unit]
Description=Odoo 18 Enterprise
After=network.target postgresql.service

[Service]
Type=simple
User=odoo
Group=odoo
ExecStart=$EXEC_CMD -c /etc/odoo/odoo.conf
Restart=always
RestartSec=10
WorkingDirectory=$WORK_DIR
$ENV_VARS

[Install]
WantedBy=multi-user.target
EOL

# 19. Setup Nginx if domain is configured
if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
    print_status "Setting up Nginx..."
    
    # Install Certbot
    apt install -y certbot python3-certbot-nginx
    
    # First create HTTP-only configuration
    cat > /etc/nginx/sites-available/odoo <<EOL
upstream odoo {
    server 127.0.0.1:8069;
}

upstream odoochat {
    server 127.0.0.1:8072;
}

# HTTP server (will be modified by certbot for HTTPS)
server {
    listen 80;
    server_name $DOMAIN_NAME;
    
    # Increase proxy timeouts
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    send_timeout 300s;
    
    # Increase buffer sizes
    proxy_buffering on;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    
    # Upload size
    client_max_body_size 2G;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Longpolling
    location /longpolling {
        proxy_pass http://odoochat;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
    }

    # Main location
    location / {
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
        
        # Handle large requests
        proxy_request_buffering off;
    }

    # Static files
    location ~* /web/static/ {
        proxy_cache_valid 200 90m;
        proxy_buffering on;
        expires 864000;
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOL

    # Enable site
    ln -sf /etc/nginx/sites-available/odoo /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    
    # Test nginx configuration
    nginx -t
    if [ $? -eq 0 ]; then
        systemctl restart nginx
        systemctl enable nginx
    else
        print_error "Nginx configuration error!"
        exit 1
    fi
    
    print_status "Nginx configured successfully with HTTP. SSL will be added after Odoo starts."
else
    # For IP-only access, create a simple nginx config for better performance
    print_status "Setting up Nginx for IP access..."
    
    cat > /etc/nginx/sites-available/odoo <<EOL
upstream odoo {
    server 127.0.0.1:8069;
}

upstream odoochat {
    server 127.0.0.1:8072;
}

server {
    listen 80;
    server_name _;
    
    # Redirect to port 8069 for direct access
    return 301 http://\$host:8069\$request_uri;
}
EOL

    # Enable site
    ln -sf /etc/nginx/sites-available/odoo /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    
    systemctl restart nginx
    systemctl enable nginx
fi

# 20. Start Odoo service
print_status "Starting Odoo service..."
systemctl daemon-reload
systemctl enable odoo
systemctl start odoo

# Wait for Odoo to start
print_status "Waiting for Odoo to start..."
sleep 30

# 21. Import database if available
if [[ -n "$DB_FILE" && -f "$DB_FILE" ]]; then
    print_status "Importing database backup..."
    
    # Create database
    su - postgres -c "createdb -O odoo18e odoo_db" 2>/dev/null || true
    
    # Import database
    if [[ "$DB_FILE" == *.sql ]]; then
        su - postgres -c "psql -d odoo_db -f \"$DB_FILE\""
    elif [[ "$DB_FILE" == *.dump ]]; then
        su - postgres -c "pg_restore -d odoo_db \"$DB_FILE\""
    fi
    
    print_status "Database imported successfully!"
fi

# 22. Setup SSL certificate if domain is configured
if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
    print_status "Waiting for Odoo to be fully operational before setting up SSL..."
    sleep 20
    
    # Check if Odoo is responding
    for i in {1..10}; do
        if curl -f http://localhost:8069 >/dev/null 2>&1; then
            print_status "Odoo is responding. Setting up SSL certificate..."
            break
        else
            print_status "Waiting for Odoo to start... (attempt $i/10)"
            sleep 10
        fi
    done
    
    # Get SSL certificate
    print_status "Obtaining SSL certificate..."
    certbot --nginx -d "$DOMAIN_NAME" --email "$SSL_EMAIL" --agree-tos --non-interactive --redirect
    
    if [ $? -eq 0 ]; then
        print_status "SSL certificate obtained successfully!"
        
        # Add security headers to the HTTPS configuration
        sed -i '/server_name.*'$DOMAIN_NAME';/a\\n    # Security headers\n    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;\n    add_header X-Content-Type-Options "nosniff" always;\n    add_header X-Frame-Options "SAMEORIGIN" always;\n    add_header X-XSS-Protection "1; mode=block" always;\n    add_header Referrer-Policy "strict-origin-when-cross-origin" always;' /etc/nginx/sites-available/odoo
        
        systemctl reload nginx
        
        # Setup auto-renewal
        systemctl enable certbot.timer
        systemctl start certbot.timer
    else
        print_warning "SSL certificate setup failed. You can try manually later with:"
        print_warning "certbot --nginx -d $DOMAIN_NAME"
    fi
fi

# 23. Configure firewall
print_status "Configuring firewall..."
ufw --force enable
ufw allow ssh
ufw allow 8069/tcp

if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
    ufw allow 80/tcp
    ufw allow 443/tcp
fi

# 24. Create maintenance scripts
print_status "Creating maintenance scripts..."

# Backup script
cat > /opt/odoo18-enterprise/backup.sh <<EOL
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
su - postgres -c "pg_dump -Fc odoo_db" > /opt/odoo18-enterprise/backups/backup_\$DATE.dump
find /opt/odoo18-enterprise/backups -name "*.dump" -mtime +7 -delete
echo "Backup completed: backup_\$DATE.dump"
EOL

chmod +x /opt/odoo18-enterprise/backup.sh
chown odoo:odoo /opt/odoo18-enterprise/backup.sh

# Create daily backup cron job
echo "0 2 * * * /opt/odoo18-enterprise/backup.sh" | crontab -

# 25. Final status check
sleep 10

print_status "=== Installation Complete ==="

if systemctl is-active --quiet odoo; then
    print_status "🎉 SUCCESS! Odoo 18 Enterprise is running!"
    echo ""
    print_status "📱 Access Information:"
    
    if [[ "$ACCESS_TYPE" == "1" ]]; then
        print_status "🌐 URL: http://$SERVER_IP:8069"
    elif [[ "$ACCESS_TYPE" == "2" ]]; then
        print_status "🌐 URL: https://$DOMAIN_NAME"
    elif [[ "$ACCESS_TYPE" == "3" ]]; then
        print_status "🌐 URLs:"
        print_status "   - https://$DOMAIN_NAME"
        print_status "   - http://$SERVER_IP:8069"
    fi
    
    echo ""
    print_status "🔐 Login Credentials:"
    print_status "   👤 Username: admin"
    print_status "   🔑 Password: admin"
    print_status "   🗄️ Database: odoo_db (if imported)"
    echo ""
    print_status "🛠️ System Information:"
    print_status "   📂 Installation: /opt/odoo18-enterprise/odoo"
    print_status "   📂 Custom addons: /opt/odoo18-enterprise/addons_manatra"
    print_status "   ⚙️ Config: /etc/odoo/odoo.conf"
    print_status "   📝 Logs: /var/log/odoo/odoo.log"
    print_status "   💾 Backups: /opt/odoo18-enterprise/backups"
    print_status "   🗄️ DB User: odoo18e / Password: odoo123"
    echo ""
    print_status "🔧 Useful Commands:"
    print_status "   systemctl restart odoo    # Restart Odoo"
    print_status "   systemctl status odoo     # Check status"
    print_status "   tail -f /var/log/odoo/odoo.log  # View logs"
    print_status "   /opt/odoo18-enterprise/backup.sh     # Manual backup"
    
    if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
        echo ""
        print_status "🔒 SSL Certificate auto-renewal is configured"
        print_status "   certbot renew --dry-run   # Test renewal"
    fi
    
else
    print_error "❌ Installation failed!"
    print_status "Checking logs..."
    journalctl -u odoo -n 50
    echo ""
    print_status "You can also check:"
    print_status "systemctl status odoo"
    print_status "tail -f /var/log/odoo/odoo.log"
fi

EOF

chmod +x complete_odoo18_install.sh
./complete_odoo18_install.sh
