cat > complete_odoo18_install.sh << 'EOF'
#!/bin/bash

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_question() {
    echo -e "${BLUE}[QUESTION]${NC} $1"
}

print_status "=== Odoo 18 Enterprise Complete Installation ==="

# Interactive configuration
print_question "How do you want to access Odoo?"
echo "1) IP address only (http://your-ip:8069)"
echo "2) Domain name with SSL (https://your-domain.com)"
echo "3) Both IP and domain with SSL"
read -p "Enter your choice (1/2/3): " ACCESS_TYPE

if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
    read -p "Enter your domain name (e.g., yourdomain.com): " DOMAIN_NAME
    read -p "Enter your email for SSL certificate: " SSL_EMAIL
    
    if [[ -z "$DOMAIN_NAME" || -z "$SSL_EMAIL" ]]; then
        print_error "Domain name and email are required for SSL setup!"
        exit 1
    fi
fi

# Database configuration
print_question "Database setup:"
echo "1) Install pre-configured database from GitHub (Recommended)"
echo "2) Create fresh database (Empty Odoo installation)"
read -p "Enter your choice (1/2): " DB_CHOICE

# Get server IP
SERVER_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip)
print_status "Detected server IP: $SERVER_IP"

# 1. Update system
print_status "Updating system packages..."
apt update && apt upgrade -y

# 2. Install dependencies
print_status "Installing system dependencies..."
apt install -y wget git python3 python3-pip python3-dev python3-venv \
    python3-wheel libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev \
    libtiff5-dev libjpeg8-dev libopenjp2-7-dev zlib1g-dev libfreetype6-dev \
    liblcms2-dev libwebp-dev libharfbuzz-dev libfribidi-dev libxcb1-dev \
    libpq-dev build-essential libssl-dev libffi-dev curl unzip nginx \
    software-properties-common

# 3. Install PostgreSQL
print_status "Installing PostgreSQL..."
apt install -y postgresql postgresql-client postgresql-contrib
systemctl start postgresql
systemctl enable postgresql

# Configure PostgreSQL for better performance and larger uploads
print_status "Optimizing PostgreSQL configuration..."
su - postgres -c "psql -c \"ALTER SYSTEM SET shared_buffers = '512MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET effective_cache_size = '2GB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET maintenance_work_mem = '256MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET checkpoint_completion_target = 0.9;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET wal_buffers = '32MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET default_statistics_target = 100;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET random_page_cost = 1.1;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET effective_io_concurrency = 200;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET max_connections = 300;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET work_mem = '32MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET max_wal_size = '2GB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET min_wal_size = '1GB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET checkpoint_timeout = '15min';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET statement_timeout = '0';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET lock_timeout = '0';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET idle_in_transaction_session_timeout = '0';\""
systemctl restart postgresql

# 4. Create PostgreSQL user
print_status "Creating PostgreSQL user..."
su - postgres -c "psql -c \"DROP USER IF EXISTS odoo18e;\"" 2>/dev/null || true
su - postgres -c "psql -c \"CREATE USER odoo18e WITH CREATEDB SUPERUSER;\""
su - postgres -c "psql -c \"ALTER USER odoo18e PASSWORD 'odoo123';\""

# 5. Remove existing odoo user and recreate
print_status "Creating system user..."
deluser odoo 2>/dev/null || true
delgroup odoo 2>/dev/null || true
adduser --system --home=/opt/odoo --group odoo

# 6. Clean and create directories
print_status "Setting up directories..."
rm -rf /opt/odoo18-enterprise
mkdir -p /opt/odoo18-enterprise
mkdir -p /var/log/odoo
mkdir -p /etc/odoo

# 7. Download source code
print_status "Downloading Odoo from https://github.com/drmostafazade/odiran"
git clone https://github.com/drmostafazade/odiran.git /opt/odoo18-enterprise/odoo

# Create additional directories
mkdir -p /opt/odoo18-enterprise/addons_manatra
mkdir -p /opt/odoo18-enterprise/data
mkdir -p /opt/odoo18-enterprise/backups

# 8. Set permissions
print_status "Setting permissions..."
chown -R odoo:odoo /opt/odoo18-enterprise
chown odoo:root /var/log/odoo
chown odoo:root /etc/odoo

# 9. Create requirements.txt
print_status "Creating requirements.txt..."
cat > /opt/odoo18-enterprise/odoo/requirements.txt <<EOL
Babel==2.14.0
chardet==5.2.0
cryptography==41.0.7
decorator==5.1.1
docutils==0.20.1
ebaysdk==2.1.5
freezegun==1.2.2
gevent==23.9.1
greenlet==3.0.1
idna==3.4
Jinja2==3.1.2
libsass==0.22.0
lxml==4.9.3
MarkupSafe==2.1.3
num2words==0.5.13
ofxparse==0.21
passlib==1.7.4
Pillow==10.1.0
polib==1.2.0
psutil==5.9.6
psycopg2-binary==2.9.8
pydot==1.4.2
pyOpenSSL==23.3.0
pypdf2==3.0.1
pyserial==3.5
python-dateutil==2.8.2
python-stdnum==1.19
pytz==2023.3
pyusb==1.2.1
qrcode==7.4.2
reportlab==4.0.7
requests==2.31.0
urllib3==2.0.7
vobject==0.9.6.1
werkzeug==2.3.7
xlrd==2.0.1
XlsxWriter==3.1.9
xlwt==1.3.0
zeep==4.2.1
EOL

chown odoo:odoo /opt/odoo18-enterprise/odoo/requirements.txt

# 10. Create virtual environment
print_status "Creating virtual environment..."
su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise && python3 -m venv odoo-venv"

# 11. Install Python packages
print_status "Installing Python packages..."
su - odoo -s /bin/bash -c "/opt/odoo18-enterprise/odoo-venv/bin/pip install --upgrade pip"
su - odoo -s /bin/bash -c "/opt/odoo18-enterprise/odoo-venv/bin/pip install -r /opt/odoo18-enterprise/odoo/requirements.txt"

# 12. Install Odoo in development mode
print_status "Installing Odoo in development mode..."
cd /opt/odoo18-enterprise/odoo
su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && /opt/odoo18-enterprise/odoo-venv/bin/pip install -e ."

# 13. Install wkhtmltopdf
print_status "Installing wkhtmltopdf..."
cd /tmp
wget -q https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-3/wkhtmltox_0.12.6.1-3.jammy_amd64.deb
dpkg -i wkhtmltox_0.12.6.1-3.jammy_amd64.deb 2>/dev/null || true
apt-get install -f -y

# 14. Install Node.js
print_status "Installing Node.js..."
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs
npm install -g rtlcss

# 15. Download and prepare database (conditional)
if [[ "$DB_CHOICE" == "1" ]]; then
    print_status "Downloading pre-configured database backup..."
    cd /opt/odoo18-enterprise/backups
    wget -O db2_2025-06-30_16-36-33.zip https://github.com/drmostafazade/odiran/raw/main/db2_2025-06-30_16-36-33.zip
    unzip -o db2_2025-06-30_16-36-33.zip
    DB_FILE=$(find /opt/odoo18-enterprise/backups -name "*.sql" -o -name "*.dump" | head -1)
    chown -R odoo:odoo /opt/odoo18-enterprise/backups
    print_status "Database backup downloaded: $DB_FILE"
else
    print_status "Skipping database download - fresh installation will be created"
    DB_FILE=""
fi

# 16. Configure Odoo
print_status "Configuring Odoo..."

# Detect addons path
if [ -d /opt/odoo18-enterprise/odoo/enterprise ]; then
    ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/enterprise,/opt/odoo18-enterprise/odoo/addons"
elif [ -d /opt/odoo18-enterprise/odoo/odoo/addons ]; then
    ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/odoo/addons"
else
    ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/addons"
fi

# Create config with optimized settings for high performance
cat > /etc/odoo/odoo.conf <<EOL
[options]
admin_passwd = 5011700
db_host = localhost
db_port = 5432
db_user = odoo18e
db_password = odoo123
addons_path = $ADDONS_PATH
data_dir = /opt/odoo18-enterprise/data
logfile = /var/log/odoo/odoo.log
log_level = info
xmlrpc_port = 8069

# Performance optimizations for large database operations
workers = 8
max_cron_threads = 4
limit_memory_soft = 4294967296
limit_memory_hard = 5368709120
limit_time_cpu = 3600
limit_time_real = 7200
limit_request = 16384
db_maxconn = 200
proxy_mode = True

# Database operation timeouts (increased for large imports)
db_template = template0
unaccent = True
csv_internal_sep = ,
reportgz = False

# Large file handling
max_file_upload_size = 2147483648

# Additional performance settings
list_db = False
without_demo = True
server_wide_modules = base,web
osv_memory_age_limit = 1.0
osv_memory_count_limit = False

# Timeout settings for large operations
longpolling_port = 8072
gevent_port = 8072
EOL

chown odoo:odoo /etc/odoo/odoo.conf
chmod 640 /etc/odoo/odoo.conf

# 17. Test execution method
print_status "Testing execution method..."
cd /opt/odoo18-enterprise/odoo

if su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && /opt/odoo18-enterprise/odoo-venv/bin/python odoo-bin --help" >/dev/null 2>&1; then
    EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python /opt/odoo18-enterprise/odoo/odoo-bin"
    WORK_DIR="/opt/odoo18-enterprise/odoo"
    ENV_VARS=""
elif su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && PYTHONPATH=/opt/odoo18-enterprise/odoo /opt/odoo18-enterprise/odoo-venv/bin/python odoo-bin --help" >/dev/null 2>&1; then
    EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python /opt/odoo18-enterprise/odoo/odoo-bin"
    WORK_DIR="/opt/odoo18-enterprise/odoo"
    ENV_VARS="Environment=PYTHONPATH=/opt/odoo18-enterprise/odoo"
elif su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && /opt/odoo18-enterprise/odoo-venv/bin/python -m odoo --help" >/dev/null 2>&1; then
    EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python -m odoo"
    WORK_DIR="/opt/odoo18-enterprise/odoo"
    ENV_VARS="Environment=PYTHONPATH=/opt/odoo18-enterprise/odoo"
else
    print_error "No execution method works!"
    exit 1
fi

# 18. Create systemd service
print_status "Creating systemd service..."
cat > /etc/systemd/system/odoo.service <<EOL
[Unit]
Description=Odoo 18 Enterprise
After=network.target postgresql.service

[Service]
Type=simple
User=odoo
Group=odoo
ExecStart=$EXEC_CMD -c /etc/odoo/odoo.conf
Restart=always
RestartSec=10
WorkingDirectory=$WORK_DIR
$ENV_VARS

[Install]
WantedBy=multi-user.target
EOL

# 19. Setup Nginx if domain is configured
if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
    print_status "Setting up Nginx..."
    
    # Install Certbot
    apt install -y certbot python3-certbot-nginx
    
    # First create optimized HTTP configuration for maximum performance
    cat > /etc/nginx/sites-available/odoo <<EOL
# Enable caching
proxy_cache_path /var/cache/nginx/odoo levels=1:2 keys_zone=odoo:100m max_size=1g inactive=60m use_temp_path=off;

upstream odoo {
    server 127.0.0.1:8069 weight=1 fail_timeout=0;
    keepalive 32;
}

upstream odoochat {
    server 127.0.0.1:8072 weight=1 fail_timeout=0;
    keepalive 8;
}

# Rate limiting
limit_req_zone \$binary_remote_addr zone=login:10m rate=5r/m;
limit_req_zone \$binary_remote_addr zone=api:10m rate=20r/s;

# HTTP server (will be modified by certbot for HTTPS)
server {
    listen 80;
    server_name $DOMAIN_NAME;
    
    # Basic security
    server_tokens off;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Buffer optimizations for large uploads
    client_body_buffer_size 1m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    client_max_body_size 10G;
    client_body_timeout 3600s;
    client_header_timeout 3600s;
    
    # Proxy optimizations for large operations
    proxy_buffering on;
    proxy_buffer_size 256k;
    proxy_buffers 16 512k;
    proxy_busy_buffers_size 1m;
    proxy_temp_file_write_size 1m;
    proxy_connect_timeout 3600s;
    proxy_send_timeout 3600s;
    proxy_read_timeout 3600s;
    send_timeout 3600s;
    
    # Disable proxy request buffering for large uploads
    proxy_request_buffering off;
    proxy_max_temp_file_size 0;
    
    # Advanced Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_http_version 1.1;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Caching for static assets
    location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff|woff2|ttf|eot)\$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        access_log off;
        proxy_pass http://odoo;
        proxy_cache odoo;
        proxy_cache_valid 200 301 302 1y;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Longpolling with extended timeouts
    location /longpolling {
        proxy_pass http://odoochat;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
        proxy_buffering off;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_connect_timeout 86400s;
    }

    # Static files with aggressive caching
    location /web/static/ {
        proxy_cache odoo;
        proxy_cache_valid 200 301 302 1y;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_ignore_headers Cache-Control Expires;
        add_header X-Cache-Status \$upstream_cache_status;
        expires 1y;
        access_log off;
        
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Database management and backup/restore operations
    location ~ ^/(web/database|base/rpc) {
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
        proxy_request_buffering off;
        proxy_read_timeout 7200s;
        proxy_send_timeout 7200s;
        proxy_connect_timeout 7200s;
        client_max_body_size 10G;
    }

    # API rate limiting (more permissive for database operations)
    location /web/dataset/ {
        limit_req zone=api burst=100 nodelay;
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
        proxy_request_buffering off;
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }

    # Login rate limiting
    location /web/login {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
    }

    # Main location with extended timeouts for large operations
    location / {
        # Cache GET requests for logged-out users
        set \$no_cache 0;
        if (\$request_method != GET) {
            set \$no_cache 1;
        }
        if (\$http_cookie ~* "session_id") {
            set \$no_cache 1;
        }
        
        proxy_cache odoo;
        proxy_cache_bypass \$no_cache;
        proxy_no_cache \$no_cache;
        proxy_cache_valid 200 301 302 10m;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
        proxy_request_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Extended timeouts for database operations
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_connect_timeout 3600s;
    }
}
EOL

    # Enable site and create cache directory
    mkdir -p /var/cache/nginx/odoo
    chown -R www-data:www-data /var/cache/nginx/
    ln -sf /etc/nginx/sites-available/odoo /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    
    # Optimize nginx.conf (check for existing directives first)
    if ! grep -q "worker_rlimit_nofile" /etc/nginx/nginx.conf; then
        sed -i 's/worker_processes auto;/worker_processes auto;\nworker_rlimit_nofile 65535;/' /etc/nginx/nginx.conf
    fi
    
    if ! grep -q "worker_cpu_affinity" /etc/nginx/nginx.conf; then
        sed -i '/worker_processes/a worker_cpu_affinity auto;' /etc/nginx/nginx.conf
    fi
    
    if ! grep -q "use epoll" /etc/nginx/nginx.conf; then
        sed -i 's/worker_connections 768;/worker_connections 4096;\n\tuse epoll;\n\tmulti_accept on;/' /etc/nginx/nginx.conf
    fi
    
    # Add performance settings to http block for large uploads (check for existing first)
    if ! grep -q "client_body_timeout 3600" /etc/nginx/nginx.conf; then
        sed -i '/include \/etc\/nginx\/mime.types;/a\\n\t# Performance optimizations\n\tclient_body_timeout 3600;\n\tclient_header_timeout 3600;\n\tproxy_connect_timeout 3600;\n\tproxy_send_timeout 3600;\n\tproxy_read_timeout 3600;\n\treset_timedout_connection on;\n\topen_file_cache max=200000 inactive=20s;\n\topen_file_cache_valid 30s;\n\topen_file_cache_min_uses 2;\n\topen_file_cache_errors on;\n\tclient_max_body_size 10G;\n\tproxy_request_buffering off;\n\tproxy_max_temp_file_size 0;' /etc/nginx/nginx.conf
    fi
    
    # Test nginx configuration
    nginx -t
    if [ $? -eq 0 ]; then
        systemctl restart nginx
        systemctl enable nginx
    else
        print_error "Nginx configuration error!"
        exit 1
    fi
    
    print_status "Nginx configured successfully with HTTP. SSL will be added after Odoo starts."
else
    # For IP-only access, create a simple nginx config for better performance
    print_status "Setting up Nginx for IP access..."
    
    cat > /etc/nginx/sites-available/odoo <<EOL
upstream odoo {
    server 127.0.0.1:8069 weight=1 fail_timeout=0;
    keepalive 32;
}

upstream odoochat {
    server 127.0.0.1:8072 weight=1 fail_timeout=0;
    keepalive 8;
}

server {
    listen 80;
    server_name _;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    # Buffer optimizations for large uploads
    client_body_buffer_size 1m;
    client_max_body_size 10G;
    client_body_timeout 3600s;
    
    # Proxy optimizations
    proxy_buffering on;
    proxy_buffer_size 256k;
    proxy_buffers 16 512k;
    proxy_busy_buffers_size 1m;
    proxy_connect_timeout 3600s;
    proxy_send_timeout 3600s;
    proxy_read_timeout 3600s;
    proxy_request_buffering off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml;

    # Longpolling
    location /longpolling {
        proxy_pass http://odoochat;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_buffering off;
        proxy_read_timeout 86400s;
    }

    # Static files
    location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff|woff2|ttf|eot)\$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Main location
    location / {
        proxy_pass http://odoo;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
}
EOL

    # Enable site
    mkdir -p /var/cache/nginx/odoo
    chown -R www-data:www-data /var/cache/nginx/
    ln -sf /etc/nginx/sites-available/odoo /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    
    # Basic nginx optimization (check for duplicates)
    if ! grep -q "worker_connections 4096" /etc/nginx/nginx.conf; then
        sed -i 's/worker_connections 768;/worker_connections 4096;/' /etc/nginx/nginx.conf
    fi
    
    systemctl restart nginx
    systemctl enable nginx
fi

# 20. Start Odoo service
print_status "Starting Odoo service..."
systemctl daemon-reload
systemctl enable odoo
systemctl start odoo

# Wait for Odoo to start
print_status "Waiting for Odoo to start..."
sleep 30

# 21. Import database if available and chosen
if [[ "$DB_CHOICE" == "1" && -n "$DB_FILE" && -f "$DB_FILE" ]]; then
    print_status "Importing pre-configured database backup..."
    print_status "This may take several minutes for large databases..."
    
    # Stop Odoo service during database import
    systemctl stop odoo 2>/dev/null || true
    
    # Create database with proper encoding and collation
    su - postgres -c "dropdb odoo_db" 2>/dev/null || true
    su - postgres -c "createdb -O odoo18e -E UTF8 -l C.UTF-8 -T template0 odoo_db"
    
    # Set temporary optimizations for faster import
    su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET synchronous_commit = OFF;\""
    su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET fsync = OFF;\""
    su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET full_page_writes = OFF;\""
    su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET checkpoint_segments = 32;\""
    su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET maintenance_work_mem = '512MB';\""
    su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET wal_buffers = '64MB';\""
    
    # Determine file type and import accordingly
    print_status "Starting database import (timeout: 2 hours)..."
    
    if [[ "$DB_FILE" == *.zip ]]; then
        # Handle zip files (extract and find dump/sql)
        cd /opt/odoo18-enterprise/backups
        unzip -o "$(basename "$DB_FILE")" 2>/dev/null || true
        
        # Find the actual database file
        ACTUAL_DB_FILE=$(find /opt/odoo18-enterprise/backups -name "*.sql" -o -name "*.dump" -o -name "*.backup" | grep -v "$(basename "$DB_FILE")" | head -1)
        
        if [[ -n "$ACTUAL_DB_FILE" ]]; then
            DB_FILE="$ACTUAL_DB_FILE"
            print_status "Found database file: $DB_FILE"
        fi
    fi
    
    # Import based on file extension
    if [[ "$DB_FILE" == *.sql ]]; then
        print_status "Importing SQL dump..."
        timeout 7200 su - postgres -c "psql -d odoo_db -f \"$DB_FILE\" -v ON_ERROR_STOP=0" || {
            print_warning "SQL import completed with some warnings"
        }
        
    elif [[ "$DB_FILE" == *.dump || "$DB_FILE" == *.backup ]]; then
        print_status "Importing PostgreSQL dump..."
        timeout 7200 su - postgres -c "pg_restore -d odoo_db \"$DB_FILE\" --verbose --no-owner --no-privileges --clean --if-exists" || {
            print_warning "Dump import completed with some warnings"
        }
        
    else
        print_error "Unsupported database file format: $DB_FILE"
        print_status "Supported formats: .sql, .dump, .backup, .zip"
    fi
    
    # Restore normal database settings
    su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db RESET ALL;\""
    
    # Fix ownership and permissions
    print_status "Fixing database ownership and permissions..."
    su - postgres -c "psql -d odoo_db -c \"REASSIGN OWNED BY postgres TO odoo18e;\""
    su - postgres -c "psql -d odoo_db -c \"GRANT ALL PRIVILEGES ON DATABASE odoo_db TO odoo18e;\""
    su - postgres -c "psql -d odoo_db -c \"GRANT ALL ON SCHEMA public TO odoo18e;\""
    su - postgres -c "psql -d odoo_db -c \"GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO odoo18e;\""
    su - postgres -c "psql -d odoo_db -c \"GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO odoo18e;\""
    su - postgres -c "psql -d odoo_db -c \"GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO odoo18e;\""
    
    # Update sequences to prevent conflicts
    print_status "Updating database sequences..."
    su - postgres -c "psql -d odoo_db -c \"
        DO \\\$\\\$
        DECLARE
            seq_name TEXT;
        BEGIN
            FOR seq_name IN
                SELECT schemaname||'.'||sequencename
                FROM pg_sequences
                WHERE schemaname = 'public'
            LOOP
                EXECUTE 'SELECT setval(''' || seq_name || ''', COALESCE((SELECT MAX(id) FROM ' || replace(seq_name, '_id_seq', '') || '), 1))';
            EXCEPTION
                WHEN OTHERS THEN
                    NULL; -- Ignore errors for sequences without corresponding tables
            END LOOP;
        END\\\$\\\$;
    \""
    
    # Install required PostgreSQL extensions
    print_status "Installing required PostgreSQL extensions..."
    su - postgres -c "psql -d odoo_db -c \"CREATE EXTENSION IF NOT EXISTS unaccent;\""
    su - postgres -c "psql -d odoo_db -c \"CREATE EXTENSION IF NOT EXISTS pg_trgm;\""
    su - postgres -c "psql -d odoo_db -c \"CREATE EXTENSION IF NOT EXISTS btree_gin;\""
    su - postgres -c "psql -d odoo_db -c \"CREATE EXTENSION IF NOT EXISTS btree_gist;\""
    
    # Update ir_config_parameter for proper URLs and settings
    print_status "Updating system parameters..."
    if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
        su - postgres -c "psql -d odoo_db -c \"
            UPDATE ir_config_parameter 
            SET value = 'https://$DOMAIN_NAME' 
            WHERE key = 'web.base.url';
        \""
    else
        su - postgres -c "psql -d odoo_db -c \"
            UPDATE ir_config_parameter 
            SET value = 'http://$SERVER_IP:8069' 
            WHERE key = 'web.base.url';
        \""
    fi
    
    # Reset admin password to default
    print_status "Resetting admin password..."
    su - postgres -c "psql -d odoo_db -c \"
        UPDATE res_users 
        SET password = '\\\$pbkdf2-sha512\\\$25000\\\$LQ9.v9zUmpbSGjH2nqPS2g\\\$LeLqocCO6rXPCpqfwSrMR2ckX3Lfj6Ln9qGk2E.GdE1V8bk6VmN2nTc6Zq5KzlKn.xLpwB5VjLU2LLKklPKlKn' 
        WHERE login = 'admin';
    \""
    
    # Clear sessions to force fresh login
    su - postgres -c "psql -d odoo_db -c \"DELETE FROM ir_sessions;\""
    
    # Update filestore paths if needed
    print_status "Updating file storage paths..."
    su - postgres -c "psql -d odoo_db -c \"
        UPDATE ir_attachment 
        SET store_fname = CASE 
            WHEN store_fname IS NOT NULL AND store_fname != '' 
            THEN store_fname 
            ELSE NULL 
        END;
    \""
    
    # Vacuum and analyze for better performance
    print_status "Optimizing database after import..."
    su - postgres -c "psql -d odoo_db -c \"VACUUM ANALYZE;\""
    
    # Update database uuid to prevent conflicts
    print_status "Updating database UUID..."
    su - postgres -c "psql -d odoo_db -c \"
        UPDATE ir_config_parameter 
        SET value = md5(random()::text || clock_timestamp()::text)::uuid 
        WHERE key = 'database.uuid';
    \""
    
    # Start Odoo service again
    systemctl start odoo
    
    print_status "Pre-configured database import completed successfully!"
    print_status "Database has been optimized and configured for this server"
    FINAL_DB_NAME="odoo_db"
    
elif [[ "$DB_CHOICE" == "2" ]]; then
    print_status "Fresh Odoo installation - database will be created on first access"
    FINAL_DB_NAME="Will be created on first login"
else
    print_status "No database configured"
    FINAL_DB_NAME="None"
fi

# 22. Setup SSL certificate if domain is configured
if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
    print_status "Waiting for Odoo to be fully operational before setting up SSL..."
    sleep 20
    
    # Check if Odoo is responding
    for i in {1..10}; do
        if curl -f http://localhost:8069 >/dev/null 2>&1; then
            print_status "Odoo is responding. Setting up SSL certificate..."
            break
        else
            print_status "Waiting for Odoo to start... (attempt $i/10)"
            sleep 10
        fi
    done
    
    # Get SSL certificate
    print_status "Obtaining SSL certificate..."
    certbot --nginx -d "$DOMAIN_NAME" --email "$SSL_EMAIL" --agree-tos --non-interactive --redirect
    
    if [ $? -eq 0 ]; then
        print_status "SSL certificate obtained successfully!"
        
        # Add security headers to the HTTPS configuration
        sed -i '/server_name.*'$DOMAIN_NAME';/a\\n    # Security headers\n    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;\n    add_header X-Content-Type-Options "nosniff" always;\n    add_header X-Frame-Options "SAMEORIGIN" always;\n    add_header X-XSS-Protection "1; mode=block" always;\n    add_header Referrer-Policy "strict-origin-when-cross-origin" always;' /etc/nginx/sites-available/odoo
        
        systemctl reload nginx
        
        # Setup auto-renewal
        systemctl enable certbot.timer
        systemctl start certbot.timer
    else
        print_warning "SSL certificate setup failed. You can try manually later with:"
        print_warning "certbot --nginx -d $DOMAIN_NAME"
    fi
fi

# 23. Configure firewall
print_status "Configuring firewall..."
ufw --force enable
ufw allow ssh
ufw allow 8069/tcp

if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
    ufw allow 80/tcp
    ufw allow 443/tcp
fi

# 24. Create maintenance scripts
print_status "Creating maintenance scripts..."

# Backup script
cat > /opt/odoo18-enterprise/backup.sh <<EOL
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
su - postgres -c "pg_dump -Fc odoo_db" > /opt/odoo18-enterprise/backups/backup_\$DATE.dump
find /opt/odoo18-enterprise/backups -name "*.dump" -mtime +7 -delete
echo "Backup completed: backup_\$DATE.dump"
EOL

chmod +x /opt/odoo18-enterprise/backup.sh
chown odoo:odoo /opt/odoo18-enterprise/backup.sh

# Create daily backup cron job
echo "0 2 * * * /opt/odoo18-enterprise/backup.sh" | crontab -

# 25. Final status check
sleep 10

print_status "=== Installation Complete ==="

if systemctl is-active --quiet odoo; then
    print_status "🎉 SUCCESS! Odoo 18 Enterprise is running!"
    echo ""
    print_status "📱 Access Information:"
    
    if [[ "$ACCESS_TYPE" == "1" ]]; then
        print_status "🌐 URL: http://$SERVER_IP:8069"
    elif [[ "$ACCESS_TYPE" == "2" ]]; then
        print_status "🌐 URL: https://$DOMAIN_NAME"
    elif [[ "$ACCESS_TYPE" == "3" ]]; then
        print_status "🌐 URLs:"
        print_status "   - https://$DOMAIN_NAME"
        print_status "   - http://$SERVER_IP:8069"
    fi
    
    echo ""
    print_status "🔐 Login Credentials:"
    print_status "   👤 Username: admin"
    print_status "   🔑 Password: admin"
    print_status "   🗄️ Database: $FINAL_DB_NAME"
    echo ""
    print_status "🛠️ System Information:"
    print_status "   📂 Installation: /opt/odoo18-enterprise/odoo"
    print_status "   📂 Custom addons: /opt/odoo18-enterprise/addons_manatra"
    print_status "   ⚙️ Config: /etc/odoo/odoo.conf"
    print_status "   📝 Logs: /var/log/odoo/odoo.log"
    print_status "   💾 Backups: /opt/odoo18-enterprise/backups"
    print_status "   🗄️ DB User: odoo18e / Password: odoo123"
    echo ""
    print_status "🔧 Useful Commands:"
    print_status "   systemctl restart odoo    # Restart Odoo"
    print_status "   systemctl status odoo     # Check status"
    print_status "   tail -f /var/log/odoo/odoo.log  # View logs"
    print_status "   /opt/odoo18-enterprise/backup.sh     # Manual backup"
    
    if [[ "$ACCESS_TYPE" == "2" || "$ACCESS_TYPE" == "3" ]]; then
        echo ""
        print_status "🔒 SSL Certificate auto-renewal is configured"
        print_status "   certbot renew --dry-run   # Test renewal"
    fi
    
else
    print_error "❌ Installation failed!"
    print_status "Checking logs..."
    journalctl -u odoo -n 50
    echo ""
    print_status "You can also check:"
    print_status "systemctl status odoo"
    print_status "tail -f /var/log/odoo/odoo.log"
fi

EOF

chmod +x complete_odoo18_install.sh
./complete_odoo18_install.sh
