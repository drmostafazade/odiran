cat > complete_odoo18_wordpress_install_fixed_v2.sh << 'EOF'
#!/bin/bash

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_question() {
    echo -e "${BLUE}[QUESTION]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}[HEADER]${NC} $1"
}

print_success() {
    echo -e "${CYAN}[SUCCESS]${NC} $1"
}

# Function to wait for apt lock and kill conflicting processes
wait_for_apt() {
    print_status "Checking for running package managers..."
    
    # Kill any running apt processes
    pkill -f apt-get 2>/dev/null || true
    pkill -f apt 2>/dev/null || true
    pkill -f dpkg 2>/dev/null || true
    pkill -f unattended-upgrade 2>/dev/null || true
    
    # Wait a moment for processes to terminate
    sleep 5
    
    # Remove lock files if they exist
    rm -f /var/lib/dpkg/lock-frontend 2>/dev/null || true
    rm -f /var/lib/dpkg/lock 2>/dev/null || true
    rm -f /var/cache/apt/archives/lock 2>/dev/null || true
    
    # Configure dpkg if needed
    dpkg --configure -a 2>/dev/null || true
    
    # Wait for any remaining processes
    while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
        print_status "Waiting for package manager to become available..."
        sleep 5
    done
    
    print_success "Package manager is now available"
}

# Function to safely run apt commands
safe_apt() {
    local max_retries=3
    local retry_count=0
    
    while [ $retry_count -lt $max_retries ]; do
        wait_for_apt
        
        if "$@"; then
            return 0
        else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
                print_warning "Command failed, retrying in 10 seconds... (attempt $retry_count/$max_retries)"
                sleep 10
            fi
        fi
    done
    
    print_error "Command failed after $max_retries attempts: $*"
    return 1
}

print_header "=== Odoo 18 Enterprise + WordPress Complete Installation (Fixed v2) ==="

# Stop any automatic updates first
print_status "Stopping automatic updates..."
systemctl stop unattended-upgrades 2>/dev/null || true
systemctl disable unattended-upgrades 2>/dev/null || true

# Clear any locks first
wait_for_apt

# Interactive configuration
print_question "Enter your main domain name (e.g., yourdomain.com):"
read -p "Domain: " MAIN_DOMAIN

print_question "Enter your email for SSL certificates:"
read -p "Email: " SSL_EMAIL

if [[ -z "$MAIN_DOMAIN" || -z "$SSL_EMAIL" ]]; then
    print_error "Domain name and email are required!"
    exit 1
fi

# Set subdomains
ERP_DOMAIN="erp.$MAIN_DOMAIN"
PMA_DOMAIN="pma.$MAIN_DOMAIN"

print_status "Configuration:"
print_status "  Main Domain (WordPress): $MAIN_DOMAIN"
print_status "  ERP Domain (Odoo): $ERP_DOMAIN"
print_status "  phpMyAdmin Domain: $PMA_DOMAIN"
print_status "  SSL Email: $SSL_EMAIL"

# PHP Version Selection
print_question "Select PHP version:"
echo "1) PHP 8.1 (Stable)"
echo "2) PHP 8.2 (Recommended)"
echo "3) PHP 8.3 (Latest)"
read -p "Enter your choice (1/2/3): " PHP_CHOICE

case $PHP_CHOICE in
    1) PHP_VERSION="8.1" ;;
    2) PHP_VERSION="8.2" ;;
    3) PHP_VERSION="8.3" ;;
    *) PHP_VERSION="8.2" ;;
esac

# Database configuration for Odoo
print_question "Odoo Database setup:"
echo "1) Install pre-configured database from GitHub (Recommended)"
echo "2) Create fresh database (Empty Odoo installation)"
read -p "Enter your choice (1/2): " DB_CHOICE

# Get server IP
SERVER_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip)
print_status "Detected server IP: $SERVER_IP"

# 1. Update system with lock handling
print_header "=== Step 1: System Update ==="
safe_apt apt update
safe_apt apt upgrade -y

# 2. Install basic dependencies
print_header "=== Step 2: Installing Basic Dependencies ==="
safe_apt apt install -y wget git curl unzip software-properties-common gnupg2 \
    build-essential libssl-dev libffi-dev certbot python3-certbot-nginx \
    ufw fail2ban

# 3. Install PostgreSQL for Odoo
print_header "=== Step 3: Installing PostgreSQL for Odoo ==="
safe_apt apt install -y postgresql postgresql-client postgresql-contrib
systemctl start postgresql
systemctl enable postgresql

# Configure PostgreSQL for better performance
print_status "Optimizing PostgreSQL configuration..."
su - postgres -c "psql -c \"ALTER SYSTEM SET shared_buffers = '512MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET effective_cache_size = '2GB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET maintenance_work_mem = '256MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET checkpoint_completion_target = 0.9;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET wal_buffers = '32MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET default_statistics_target = 100;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET random_page_cost = 1.1;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET effective_io_concurrency = 200;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET max_connections = 300;\""
su - postgres -c "psql -c \"ALTER SYSTEM SET work_mem = '32MB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET max_wal_size = '2GB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET min_wal_size = '1GB';\""
su - postgres -c "psql -c \"ALTER SYSTEM SET checkpoint_timeout = '15min';\""
systemctl restart postgresql

# Create PostgreSQL user for Odoo
print_status "Creating PostgreSQL user for Odoo..."
su - postgres -c "psql -c \"DROP USER IF EXISTS odoo18e;\"" 2>/dev/null || true
su - postgres -c "psql -c \"CREATE USER odoo18e WITH CREATEDB SUPERUSER;\""
su - postgres -c "psql -c \"ALTER USER odoo18e PASSWORD 'odoo123';\""

# 4. Install MariaDB for WordPress (more stable than MySQL)
print_header "=== Step 4: Installing MariaDB for WordPress ==="

# Remove any existing MySQL/MariaDB installations first
print_status "Cleaning any existing database installations..."
systemctl stop mysql 2>/dev/null || true
systemctl stop mariadb 2>/dev/null || true
pkill -f mysql 2>/dev/null || true
pkill -f mariadb 2>/dev/null || true

wait_for_apt
safe_apt apt remove --purge mysql-server mysql-client mysql-common mariadb-server mariadb-client -y
safe_apt apt autoremove -y
safe_apt apt autoclean

# Clean up data directories
rm -rf /var/lib/mysql* 2>/dev/null || true
rm -rf /etc/mysql 2>/dev/null || true
rm -rf /var/log/mysql* 2>/dev/null || true

# Install MariaDB fresh
print_status "Installing MariaDB fresh..."
safe_apt apt update
safe_apt apt install -y mariadb-server mariadb-client

# Start and enable MariaDB
systemctl start mariadb
systemctl enable mariadb
sleep 10

# Secure MariaDB installation
print_status "Securing MariaDB installation..."
mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql_root_pass123';" 2>/dev/null || true
mysql -uroot -pmysql_root_pass123 -e "DELETE FROM mysql.user WHERE User='';" 2>/dev/null || true
mysql -uroot -pmysql_root_pass123 -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');" 2>/dev/null || true
mysql -uroot -pmysql_root_pass123 -e "DROP DATABASE IF EXISTS test;" 2>/dev/null || true
mysql -uroot -pmysql_root_pass123 -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';" 2>/dev/null || true
mysql -uroot -pmysql_root_pass123 -e "FLUSH PRIVILEGES;" 2>/dev/null || true

# Create WordPress database and user
print_status "Creating WordPress database..."
mysql -uroot -pmysql_root_pass123 -e "DROP DATABASE IF EXISTS wordpress;" 2>/dev/null || true
mysql -uroot -pmysql_root_pass123 -e "CREATE DATABASE wordpress CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
mysql -uroot -pmysql_root_pass123 -e "DROP USER IF EXISTS 'wordpress'@'localhost';" 2>/dev/null || true
mysql -uroot -pmysql_root_pass123 -e "CREATE USER 'wordpress'@'localhost' IDENTIFIED BY 'wp_pass123';"
mysql -uroot -pmysql_root_pass123 -e "GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpress'@'localhost';"
mysql -uroot -pmysql_root_pass123 -e "FLUSH PRIVILEGES;"

# Test WordPress database connection
if mysql -uwordpress -pwp_pass123 -e "SELECT 1;" >/dev/null 2>&1; then
    print_success "✅ WordPress database connection works"
else
    print_error "❌ WordPress database connection failed"
    exit 1
fi

# Optimize MariaDB for WordPress
print_status "Optimizing MariaDB configuration..."
cat >> /etc/mysql/mariadb.conf.d/50-server.cnf <<EOL

# WordPress Optimizations
max_connections = 200
innodb_buffer_pool_size = 1G
innodb_log_file_size = 256M
innodb_log_buffer_size = 64M
innodb_flush_log_at_trx_commit = 2
innodb_flush_method = O_DIRECT
query_cache_type = 1
query_cache_size = 128M
query_cache_limit = 2M
tmp_table_size = 128M
max_heap_table_size = 128M
key_buffer_size = 256M
sort_buffer_size = 2M
read_buffer_size = 2M
read_rnd_buffer_size = 8M
myisam_sort_buffer_size = 64M
thread_cache_size = 8
table_open_cache = 4000
EOL

systemctl restart mariadb

# 5. Install Redis for WordPress caching
print_header "=== Step 5: Installing Redis ==="
safe_apt apt install -y redis-server redis-tools

# Configure Redis for WordPress
print_status "Configuring Redis..."
sed -i 's/# maxmemory <bytes>/maxmemory 256mb/' /etc/redis/redis.conf
sed -i 's/# maxmemory-policy noeviction/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf
systemctl restart redis-server
systemctl enable redis-server

# 6. Install PHP
print_header "=== Step 6: Installing PHP $PHP_VERSION ==="
safe_apt add-apt-repository ppa:ondrej/php -y
safe_apt apt update
safe_apt apt install -y php$PHP_VERSION php$PHP_VERSION-fpm php$PHP_VERSION-mysql php$PHP_VERSION-redis \
    php$PHP_VERSION-gd php$PHP_VERSION-xml php$PHP_VERSION-mbstring php$PHP_VERSION-curl \
    php$PHP_VERSION-zip php$PHP_VERSION-intl php$PHP_VERSION-bcmath php$PHP_VERSION-soap \
    php$PHP_VERSION-imagick php$PHP_VERSION-opcache

# Configure PHP-FPM for performance
print_status "Optimizing PHP-FPM configuration..."
PHP_FPM_CONF="/etc/php/$PHP_VERSION/fpm/pool.d/www.conf"
sed -i 's/pm = dynamic/pm = static/' $PHP_FPM_CONF
sed -i 's/pm.max_children = 5/pm.max_children = 50/' $PHP_FPM_CONF
sed -i 's/pm.start_servers = 2/pm.start_servers = 10/' $PHP_FPM_CONF
sed -i 's/pm.min_spare_servers = 1/pm.min_spare_servers = 5/' $PHP_FPM_CONF
sed -i 's/pm.max_spare_servers = 3/pm.max_spare_servers = 15/' $PHP_FPM_CONF

# Configure PHP settings
print_status "Optimizing PHP configuration..."
PHP_INI="/etc/php/$PHP_VERSION/fpm/php.ini"
sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 512M/' $PHP_INI
sed -i 's/post_max_size = 8M/post_max_size = 512M/' $PHP_INI
sed -i 's/max_execution_time = 30/max_execution_time = 300/' $PHP_INI
sed -i 's/max_input_time = 60/max_input_time = 300/' $PHP_INI
sed -i 's/memory_limit = 128M/memory_limit = 512M/' $PHP_INI
sed -i 's/;opcache.enable=1/opcache.enable=1/' $PHP_INI
sed -i 's/;opcache.memory_consumption=128/opcache.memory_consumption=256/' $PHP_INI
sed -i 's/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=20000/' $PHP_INI

systemctl restart php$PHP_VERSION-fpm
systemctl enable php$PHP_VERSION-fpm

# 7. Install Python dependencies for Odoo
print_header "=== Step 7: Installing Python Dependencies for Odoo ==="
safe_apt apt install -y python3 python3-pip python3-dev python3-venv python3-wheel \
    libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev libtiff5-dev \
    libjpeg8-dev libopenjp2-7-dev zlib1g-dev libfreetype6-dev liblcms2-dev \
    libwebp-dev libharfbuzz-dev libfribidi-dev libxcb1-dev libpq-dev

# 8. Create system users
print_header "=== Step 8: Creating System Users ==="
# Remove existing odoo user and recreate
deluser odoo 2>/dev/null || true
delgroup odoo 2>/dev/null || true
adduser --system --home=/opt/odoo --group odoo

# Create www-data if not exists
id -u www-data &>/dev/null || useradd -r -s /bin/false www-data

# 9. Setup Odoo directories and download source
print_header "=== Step 9: Setting up Odoo ==="
rm -rf /opt/odoo18-enterprise
mkdir -p /opt/odoo18-enterprise
mkdir -p /var/log/odoo
mkdir -p /etc/odoo

# Download Odoo source code
print_status "Downloading Odoo from https://github.com/drmostafazade/odiran"
git clone https://github.com/drmostafazade/odiran.git /opt/odoo18-enterprise/odoo

# Create additional directories
mkdir -p /opt/odoo18-enterprise/addons_manatra
mkdir -p /opt/odoo18-enterprise/data
mkdir -p /opt/odoo18-enterprise/backups

# Set permissions
chown -R odoo:odoo /opt/odoo18-enterprise
chown odoo:root /var/log/odoo
chown odoo:root /etc/odoo

# 10. Setup WordPress
print_header "=== Step 10: Setting up WordPress ==="
mkdir -p /var/www/wordpress
cd /tmp

# Download latest WordPress
print_status "Downloading latest WordPress..."
wget -q https://wordpress.org/latest.tar.gz
tar -xzf latest.tar.gz
cp -R wordpress/* /var/www/wordpress/
rm -rf wordpress latest.tar.gz

# Set WordPress permissions
chown -R www-data:www-data /var/www/wordpress
find /var/www/wordpress -type d -exec chmod 755 {} \;
find /var/www/wordpress -type f -exec chmod 644 {} \;

# Create WordPress configuration
print_status "Creating WordPress configuration..."
cd /var/www/wordpress
cp wp-config-sample.php wp-config.php

# Generate WordPress salts
SALT=$(curl -s https://api.wordpress.org/secret-key/1.1/salt/)

# Configure wp-config.php
sed -i "s/database_name_here/wordpress/" wp-config.php
sed -i "s/username_here/wordpress/" wp-config.php
sed -i "s/password_here/wp_pass123/" wp-config.php
sed -i "s/localhost/localhost/" wp-config.php

# Add Redis cache configuration
cat >> wp-config.php <<EOL

/* Redis Cache Configuration */
define('WP_REDIS_HOST', '127.0.0.1');
define('WP_REDIS_PORT', 6379);
define('WP_REDIS_TIMEOUT', 1);
define('WP_REDIS_READ_TIMEOUT', 1);
define('WP_REDIS_DATABASE', 0);
define('WP_CACHE', true);

/* Security and Performance */
define('DISALLOW_FILE_EDIT', true);
define('WP_POST_REVISIONS', 3);
define('AUTOSAVE_INTERVAL', 300);
define('WP_MEMORY_LIMIT', '512M');
EOL

# Replace salts in wp-config.php
sed -i '/AUTH_KEY/,/NONCE_SALT/d' wp-config.php
echo "$SALT" >> wp-config.php
echo "" >> wp-config.php
echo "/* That's all, stop editing! Happy publishing. */" >> wp-config.php

chown www-data:www-data wp-config.php

# 11. Install phpMyAdmin
print_header "=== Step 11: Installing phpMyAdmin ==="
cd /tmp
wget -q https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz
tar -xzf phpMyAdmin-latest-all-languages.tar.gz
PMA_DIR=$(find . -name "phpMyAdmin-*" -type d | head -1)
mkdir -p /var/www/phpmyadmin
cp -R $PMA_DIR/* /var/www/phpmyadmin/
rm -rf phpMyAdmin-* $PMA_DIR

# Configure phpMyAdmin
cd /var/www/phpmyadmin
cp config.sample.inc.php config.inc.php

# Generate blowfish secret
BLOWFISH_SECRET=$(openssl rand -base64 32)
sed -i "s/\$cfg\['blowfish_secret'\] = '';/\$cfg['blowfish_secret'] = '$BLOWFISH_SECRET';/" config.inc.php

# Add security configurations
cat >> config.inc.php <<EOL

/* Security Settings */
\$cfg['LoginCookieValidity'] = 3600;
\$cfg['MaxNavigationItems'] = 500;
\$cfg['UploadDir'] = '';
\$cfg['SaveDir'] = '';
\$cfg['TempDir'] = '/tmp';
\$cfg['AllowThirdPartyFraming'] = false;
\$cfg['CaptchaLoginPublicKey'] = '';
\$cfg['CaptchaLoginPrivateKey'] = '';
EOL

# Set permissions
chown -R www-data:www-data /var/www/phpmyadmin
find /var/www/phpmyadmin -type d -exec chmod 755 {} \;
find /var/www/phpmyadmin -type f -exec chmod 644 {} \;

# 12. Install Nginx
print_header "=== Step 12: Installing and Configuring Nginx ==="
safe_apt apt install -y nginx

# Create optimized nginx.conf
print_status "Optimizing Nginx configuration..."
cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup

cat > /etc/nginx/nginx.conf <<EOL
user www-data;
worker_processes auto;
worker_rlimit_nofile 65535;
pid /run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # File upload settings
    client_max_body_size 10G;
    client_body_buffer_size 1m;
    client_body_timeout 3600s;
    client_header_timeout 3600s;
    
    # Proxy settings
    proxy_connect_timeout 3600s;
    proxy_send_timeout 3600s;
    proxy_read_timeout 3600s;
    proxy_request_buffering off;
    proxy_max_temp_file_size 0;
    
    # Performance optimizations
    reset_timedout_connection on;
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_http_version 1.1;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Rate limiting
    limit_req_zone \$binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone \$binary_remote_addr zone=api:10m rate=20r/s;
    limit_req_zone \$binary_remote_addr zone=wp:10m rate=10r/s;
    
    # Cache zones
    proxy_cache_path /var/cache/nginx/odoo levels=1:2 keys_zone=odoo:100m max_size=1g inactive=60m use_temp_path=off;
    fastcgi_cache_path /var/cache/nginx/wordpress levels=1:2 keys_zone=wordpress:100m max_size=2g inactive=60m use_temp_path=off;
    
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
EOL

# Create cache directories
mkdir -p /var/cache/nginx/{odoo,wordpress}
chown -R www-data:www-data /var/cache/nginx/

# 13. Create Nginx configurations for each service
print_header "=== Step 13: Creating Nginx Virtual Hosts ==="

# WordPress configuration
print_status "Creating WordPress Nginx configuration..."
cat > /etc/nginx/sites-available/wordpress <<EOL
# WordPress FastCGI Cache configuration
fastcgi_cache_key "\$scheme\$request_method\$host\$request_uri";

server {
    listen 80;
    server_name $MAIN_DOMAIN;
    root /var/www/wordpress;
    index index.php index.html index.htm;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # WordPress security
    location ~ /\.ht {
        deny all;
    }
    
    location ~ /\.user\.ini {
        deny all;
    }
    
    location ~* /(?:uploads|files)/.*\.php\$ {
        deny all;
    }
    
    # Static files caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|zip|tar|bz2|rar|eot|woff|woff2|ttf|svg)\$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        access_log off;
        try_files \$uri =404;
    }
    
    # WordPress permalinks
    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }
    
    # WordPress admin rate limiting
    location ~* /(wp-admin|wp-login\.php) {
        limit_req zone=login burst=5 nodelay;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php/php$PHP_VERSION-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME \$fastcgi_script_name;
    }
    
    # PHP processing with FastCGI cache
    location ~ \.php\$ {
        limit_req zone=wp burst=20 nodelay;
        
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php/php$PHP_VERSION-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME \$fastcgi_script_name;
        
        # FastCGI cache settings
        fastcgi_cache wordpress;
        fastcgi_cache_valid 200 301 302 60m;
        fastcgi_cache_valid 404 1m;
        fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_503;
        fastcgi_cache_lock on;
        
        # Cache bypass conditions
        set \$no_cache 0;
        if (\$request_method = POST) {
            set \$no_cache 1;
        }
        if (\$query_string != "") {
            set \$no_cache 1;
        }
        if (\$request_uri ~* "/(wp-admin/|wp-login\.php|wp-register\.php|cart|checkout|my-account)") {
            set \$no_cache 1;
        }
        if (\$http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_logged_in") {
            set \$no_cache 1;
        }
        
        fastcgi_cache_bypass \$no_cache;
        fastcgi_no_cache \$no_cache;
        
        add_header X-Cache-Status \$upstream_cache_status;
    }
}
EOL

# Odoo configuration  
print_status "Creating Odoo Nginx configuration..."
cat > /etc/nginx/sites-available/odoo <<EOL
upstream odoo {
    server 127.0.0.1:8069 weight=1 fail_timeout=0;
    keepalive 32;
}

upstream odoochat {
    server 127.0.0.1:8072 weight=1 fail_timeout=0;
    keepalive 8;
}

server {
    listen 80;
    server_name $ERP_DOMAIN;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Buffer optimizations for large uploads
    client_body_buffer_size 1m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    client_max_body_size 10G;
    client_body_timeout 3600s;
    client_header_timeout 3600s;
    
    # Proxy optimizations for large operations
    proxy_buffering on;
    proxy_buffer_size 256k;
    proxy_buffers 16 512k;
    proxy_busy_buffers_size 1m;
    proxy_temp_file_write_size 1m;
    proxy_connect_timeout 3600s;
    proxy_send_timeout 3600s;
    proxy_read_timeout 3600s;
    send_timeout 3600s;
    
    # Disable proxy request buffering for large uploads
    proxy_request_buffering off;
    proxy_max_temp_file_size 0;
    
# Caching for static assets
   location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff|woff2|ttf|eot)\$ {
       expires 1y;
       add_header Cache-Control "public, immutable";
       add_header Vary Accept-Encoding;
       access_log off;
       proxy_pass http://odoo;
       proxy_cache odoo;
       proxy_cache_valid 200 301 302 1y;
       proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
       proxy_set_header Host \$host;
       proxy_set_header X-Real-IP \$remote_addr;
       proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto \$scheme;
   }

   # Longpolling with extended timeouts
   location /longpolling {
       proxy_pass http://odoochat;
       proxy_set_header Host \$host;
       proxy_set_header X-Real-IP \$remote_addr;
       proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto \$scheme;
       proxy_redirect off;
       proxy_buffering off;
       proxy_read_timeout 86400s;
       proxy_send_timeout 86400s;
       proxy_connect_timeout 86400s;
   }

   # Static files with aggressive caching
   location /web/static/ {
       proxy_cache odoo;
       proxy_cache_valid 200 301 302 1y;
       proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
       proxy_ignore_headers Cache-Control Expires;
       add_header X-Cache-Status \$upstream_cache_status;
       expires 1y;
       access_log off;
       
       proxy_pass http://odoo;
       proxy_set_header Host \$host;
       proxy_set_header X-Real-IP \$remote_addr;
       proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto \$scheme;
   }

   # Database management and backup/restore operations
   location ~ ^/(web/database|base/rpc) {
       proxy_pass http://odoo;
       proxy_set_header Host \$host;
       proxy_set_header X-Real-IP \$remote_addr;
       proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto \$scheme;
       proxy_redirect off;
       proxy_request_buffering off;
       proxy_read_timeout 7200s;
       proxy_send_timeout 7200s;
       proxy_connect_timeout 7200s;
       client_max_body_size 10G;
   }

   # API rate limiting
   location /web/dataset/ {
       limit_req zone=api burst=100 nodelay;
       proxy_pass http://odoo;
       proxy_set_header Host \$host;
       proxy_set_header X-Real-IP \$remote_addr;
       proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto \$scheme;
       proxy_redirect off;
       proxy_request_buffering off;
       proxy_read_timeout 3600s;
       proxy_send_timeout 3600s;
   }

   # Login rate limiting
   location /web/login {
       limit_req zone=login burst=5 nodelay;
       proxy_pass http://odoo;
       proxy_set_header Host \$host;
       proxy_set_header X-Real-IP \$remote_addr;
       proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto \$scheme;
       proxy_redirect off;
   }

   # Main location with extended timeouts for large operations
   location / {
       # Cache GET requests for logged-out users
       set \$no_cache 0;
       if (\$request_method != GET) {
           set \$no_cache 1;
       }
       if (\$http_cookie ~* "session_id") {
           set \$no_cache 1;
       }
       
       proxy_cache odoo;
       proxy_cache_bypass \$no_cache;
       proxy_no_cache \$no_cache;
       proxy_cache_valid 200 301 302 10m;
       proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
       
       proxy_pass http://odoo;
       proxy_set_header Host \$host;
       proxy_set_header X-Real-IP \$remote_addr;
       proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto \$scheme;
       proxy_redirect off;
       proxy_request_buffering off;
       proxy_http_version 1.1;
       proxy_set_header Connection "";
       
       # Extended timeouts for database operations
       proxy_read_timeout 3600s;
       proxy_send_timeout 3600s;
       proxy_connect_timeout 3600s;
   }
}
EOL

# phpMyAdmin configuration
print_status "Creating phpMyAdmin Nginx configuration..."
cat > /etc/nginx/sites-available/phpmyadmin <<EOL
server {
   listen 80;
   server_name $PMA_DOMAIN;
   root /var/www/phpmyadmin;
   index index.php index.html index.htm;
   
   # Security headers
   add_header X-Frame-Options "SAMEORIGIN" always;
   add_header X-Content-Type-Options "nosniff" always;
   add_header X-XSS-Protection "1; mode=block" always;
   add_header Referrer-Policy "strict-origin-when-cross-origin" always;
   
   # Security restrictions
   location ~ /\.ht {
       deny all;
   }
   
   location ~ /(libraries|setup/frames|setup/libs) {
       deny all;
       return 404;
   }
   
   # Static files
   location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)\$ {
       expires 1y;
       add_header Cache-Control "public, immutable";
       access_log off;
   }
   
   # Rate limiting for login
   location ~* /(index\.php|login\.php) {
       limit_req zone=login burst=3 nodelay;
       include fastcgi_params;
       fastcgi_pass unix:/var/run/php/php$PHP_VERSION-fpm.sock;
       fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
       fastcgi_param SCRIPT_NAME \$fastcgi_script_name;
   }
   
   # PHP processing
   location ~ \.php\$ {
       include fastcgi_params;
       fastcgi_pass unix:/var/run/php/php$PHP_VERSION-fpm.sock;
       fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
       fastcgi_param SCRIPT_NAME \$fastcgi_script_name;
       fastcgi_read_timeout 300;
   }
   
   location / {
       try_files \$uri \$uri/ =404;
   }
}
EOL

# 14. Setup Odoo Python environment and dependencies
print_header "=== Step 14: Setting up Odoo Python Environment ==="

# Create requirements.txt
print_status "Creating Odoo requirements.txt..."
cat > /opt/odoo18-enterprise/odoo/requirements.txt <<EOL
Babel==2.14.0
chardet==5.2.0
cryptography==41.0.7
decorator==5.1.1
docutils==0.20.1
ebaysdk==2.1.5
freezegun==1.2.2
gevent==23.9.1
greenlet==3.0.1
idna==3.4
Jinja2==3.1.2
libsass==0.22.0
lxml==4.9.3
MarkupSafe==2.1.3
num2words==0.5.13
ofxparse==0.21
passlib==1.7.4
Pillow==10.1.0
polib==1.2.0
psutil==5.9.6
psycopg2-binary==2.9.8
pydot==1.4.2
pyOpenSSL==23.3.0
pypdf2==3.0.1
pyserial==3.5
python-dateutil==2.8.2
python-stdnum==1.19
pytz==2023.3
pyusb==1.2.1
qrcode==7.4.2
reportlab==4.0.7
requests==2.31.0
urllib3==2.0.7
vobject==0.9.6.1
werkzeug==2.3.7
xlrd==2.0.1
XlsxWriter==3.1.9
xlwt==1.3.0
zeep==4.2.1
EOL

chown odoo:odoo /opt/odoo18-enterprise/odoo/requirements.txt

# Create virtual environment
print_status "Creating Python virtual environment..."
su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise && python3 -m venv odoo-venv"

# Install Python packages
print_status "Installing Python packages..."
su - odoo -s /bin/bash -c "/opt/odoo18-enterprise/odoo-venv/bin/pip install --upgrade pip"
su - odoo -s /bin/bash -c "/opt/odoo18-enterprise/odoo-venv/bin/pip install -r /opt/odoo18-enterprise/odoo/requirements.txt"

# 15. Install additional tools
print_header "=== Step 15: Installing Additional Tools ==="

# Install wkhtmltopdf
print_status "Installing wkhtmltopdf..."
cd /tmp
wget -q https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-3/wkhtmltox_0.12.6.1-3.jammy_amd64.deb
dpkg -i wkhtmltox_0.12.6.1-3.jammy_amd64.deb 2>/dev/null || true
safe_apt apt-get install -f -y

# Install Node.js for Odoo
print_status "Installing Node.js..."
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
safe_apt apt-get install -y nodejs
npm install -g rtlcss

# Install WP-CLI for WordPress management
print_status "Installing WP-CLI..."
cd /tmp
curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
chmod +x wp-cli.phar
mv wp-cli.phar /usr/local/bin/wp

# 16. Test Odoo execution methods and create service
print_header "=== Step 16: Testing Odoo Execution Methods ==="

# Detect addons path
if [ -d /opt/odoo18-enterprise/odoo/enterprise ]; then
   ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/enterprise,/opt/odoo18-enterprise/odoo/addons"
elif [ -d /opt/odoo18-enterprise/odoo/odoo/addons ]; then
   ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/odoo/addons"
else
   ADDONS_PATH="/opt/odoo18-enterprise/addons_manatra,/opt/odoo18-enterprise/odoo/addons"
fi

# Create config with optimized settings
cat > /etc/odoo/odoo.conf <<EOL
[options]
admin_passwd = 5011700
db_host = localhost
db_port = 5432
db_user = odoo18e
db_password = odoo123
addons_path = $ADDONS_PATH
data_dir = /opt/odoo18-enterprise/data
logfile = /var/log/odoo/odoo.log
log_level = info
xmlrpc_port = 8069

# Performance optimizations for large database operations
workers = 8
max_cron_threads = 4
limit_memory_soft = 4294967296
limit_memory_hard = 5368709120
limit_time_cpu = 3600
limit_time_real = 7200
limit_request = 16384
db_maxconn = 200
proxy_mode = True

# Database operation timeouts (increased for large imports)
db_template = template0
unaccent = True
csv_internal_sep = ,
reportgz = False

# Large file handling
max_file_upload_size = 2147483648

# Additional performance settings
list_db = True
without_demo = True
server_wide_modules = base,web
osv_memory_age_limit = 1.0
osv_memory_count_limit = False

# Timeout settings for large operations
longpolling_port = 8072
gevent_port = 8072
EOL

chown odoo:odoo /etc/odoo/odoo.conf
chmod 640 /etc/odoo/odoo.conf

# Test Odoo execution methods
print_status "Testing Odoo execution methods..."
cd /opt/odoo18-enterprise/odoo

EXEC_METHOD_FOUND=false

# Method 1: Direct odoo-bin execution
if [ -f "odoo-bin" ]; then
   print_status "Testing Method 1: Direct odoo-bin execution..."
   if su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && timeout 10 /opt/odoo18-enterprise/odoo-venv/bin/python odoo-bin --help" >/dev/null 2>&1; then
       EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python /opt/odoo18-enterprise/odoo/odoo-bin"
       WORK_DIR="/opt/odoo18-enterprise/odoo"
       ENV_VARS=""
       EXEC_METHOD_FOUND=true
       print_success "✅ Method 1 works: Direct odoo-bin"
   fi
fi

# Method 2: odoo-bin with PYTHONPATH
if [ "$EXEC_METHOD_FOUND" = false ] && [ -f "odoo-bin" ]; then
   print_status "Testing Method 2: odoo-bin with PYTHONPATH..."
   if su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && timeout 10 PYTHONPATH=/opt/odoo18-enterprise/odoo /opt/odoo18-enterprise/odoo-venv/bin/python odoo-bin --help" >/dev/null 2>&1; then
       EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python /opt/odoo18-enterprise/odoo/odoo-bin"
       WORK_DIR="/opt/odoo18-enterprise/odoo"
       ENV_VARS="Environment=PYTHONPATH=/opt/odoo18-enterprise/odoo"
       EXEC_METHOD_FOUND=true
       print_success "✅ Method 2 works: odoo-bin with PYTHONPATH"
   fi
fi

# Method 3: Python module execution
if [ "$EXEC_METHOD_FOUND" = false ]; then
   print_status "Testing Method 3: Python module execution..."
   if su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && timeout 10 PYTHONPATH=/opt/odoo18-enterprise/odoo /opt/odoo18-enterprise/odoo-venv/bin/python -m odoo --help" >/dev/null 2>&1; then
       EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python -m odoo"
       WORK_DIR="/opt/odoo18-enterprise/odoo"
       ENV_VARS="Environment=PYTHONPATH=/opt/odoo18-enterprise/odoo"
       EXEC_METHOD_FOUND=true
       print_success "✅ Method 3 works: Python module execution"
   fi
fi

# Method 4: Try with setup.py install
if [ "$EXEC_METHOD_FOUND" = false ] && [ -f "setup.py" ]; then
   print_status "Testing Method 4: Installing Odoo via setup.py..."
   su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && /opt/odoo18-enterprise/odoo-venv/bin/pip install -e ."
   
   if su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && timeout 10 /opt/odoo18-enterprise/odoo-venv/bin/python -m odoo --help" >/dev/null 2>&1; then
       EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python -m odoo"
       WORK_DIR="/opt/odoo18-enterprise/odoo"
       ENV_VARS="Environment=PYTHONPATH=/opt/odoo18-enterprise/odoo"
       EXEC_METHOD_FOUND=true
       print_success "✅ Method 4 works: setup.py install + module execution"
   fi
fi

# If no method works, try fresh installation
if [ "$EXEC_METHOD_FOUND" = false ]; then
   print_warning "All methods failed. Reinstalling Odoo from scratch..."
   
   # Backup configuration
   cp /etc/odoo/odoo.conf /tmp/odoo.conf.backup 2>/dev/null || true
   
   # Remove current installation
   rm -rf /opt/odoo18-enterprise/odoo
   
   # Clone fresh copy
   print_status "Downloading fresh Odoo copy..."
   cd /opt/odoo18-enterprise
   git clone https://github.com/drmostafazade/odiran.git odoo
   
   # Set permissions
   chown -R odoo:odoo /opt/odoo18-enterprise/odoo
   
   # Install requirements
   if [ -f "/opt/odoo18-enterprise/odoo/requirements.txt" ]; then
       su - odoo -s /bin/bash -c "/opt/odoo18-enterprise/odoo-venv/bin/pip install -r /opt/odoo18-enterprise/odoo/requirements.txt"
   fi
   
   # Test again
   cd /opt/odoo18-enterprise/odoo
   if [ -f "odoo-bin" ] && su - odoo -s /bin/bash -c "cd /opt/odoo18-enterprise/odoo && timeout 10 /opt/odoo18-enterprise/odoo-venv/bin/python odoo-bin --help" >/dev/null 2>&1; then
       EXEC_CMD="/opt/odoo18-enterprise/odoo-venv/bin/python /opt/odoo18-enterprise/odoo/odoo-bin"
       WORK_DIR="/opt/odoo18-enterprise/odoo"
       ENV_VARS=""
       EXEC_METHOD_FOUND=true
       print_success "✅ Fresh installation works"
   else
       print_error "❌ Fresh installation also failed!"
       exit 1
   fi
fi

# Create systemd service with working method
print_status "Creating Odoo systemd service..."
cat > /etc/systemd/system/odoo.service <<EOL
[Unit]
Description=Odoo 18 Enterprise
Requires=postgresql.service
After=network.target postgresql.service

[Service]
Type=simple
SyslogIdentifier=odoo
PermissionsStartOnly=true
User=odoo
Group=odoo
ExecStart=$EXEC_CMD -c /etc/odoo/odoo.conf
StandardOutput=journal+console
$ENV_VARS
KillMode=mixed
TimeoutStopSec=30
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOL

# 17. Enable Nginx sites
print_header "=== Step 17: Enabling Nginx Sites ==="
ln -sf /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/
ln -sf /etc/nginx/sites-available/odoo /etc/nginx/sites-enabled/
ln -sf /etc/nginx/sites-available/phpmyadmin /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

# Test nginx configuration
nginx -t
if [ $? -eq 0 ]; then
   systemctl restart nginx
   systemctl enable nginx
else
   print_error "Nginx configuration error!"
   exit 1
fi

# 18. Download and prepare Odoo database
print_header "=== Step 18: Preparing Odoo Database ==="
if [[ "$DB_CHOICE" == "1" ]]; then
   print_status "Downloading pre-configured database backup..."
   cd /opt/odoo18-enterprise/backups
   wget -O db2_2025-06-30_16-36-33.zip https://github.com/drmostafazade/odiran/raw/main/db2_2025-06-30_16-36-33.zip
   unzip -o db2_2025-06-30_16-36-33.zip
   DB_FILE=$(find /opt/odoo18-enterprise/backups -name "*.sql" -o -name "*.dump" | head -1)
   chown -R odoo:odoo /opt/odoo18-enterprise/backups
   print_status "Database backup downloaded: $DB_FILE"
else
   print_status "Fresh Odoo installation will be created"
   DB_FILE=""
fi

# 19. Start services with database checks
print_header "=== Step 19: Starting Services with Database Verification ==="

# Ensure PostgreSQL is running
if ! systemctl is-active --quiet postgresql; then
   systemctl start postgresql
   sleep 10
fi

# Ensure MariaDB is running and connections work
if ! systemctl is-active --quiet mariadb; then
   systemctl start mariadb
   sleep 10
fi

# Test database connections before starting Odoo
print_status "Verifying database connections..."

# Test PostgreSQL
if su - postgres -c "psql -c 'SELECT 1;'" >/dev/null 2>&1; then
   print_success "✅ PostgreSQL connection works"
else
   print_error "❌ PostgreSQL connection failed"
   exit 1
fi

# Test MariaDB
if mysql -uwordpress -pwp_pass123 -e "SELECT 1;" >/dev/null 2>&1; then
   print_success "✅ WordPress database connection works"
else
   print_error "❌ WordPress database connection failed"
   exit 1
fi

# Start Odoo service
systemctl daemon-reload
systemctl enable odoo
systemctl start odoo

# Wait for Odoo to start and check status
print_status "Waiting for Odoo to start..."
sleep 30

# Check if Odoo started successfully
if systemctl is-active --quiet odoo; then
   print_success "✅ Odoo service started"
   
   # Test web interface
   if curl -f http://localhost:8069 >/dev/null 2>&1; then
       print_success "✅ Odoo web interface accessible"
   else
       print_warning "⚠️ Odoo web interface not yet accessible, checking logs..."
       journalctl -u odoo -n 10 --no-pager
   fi
else
   print_error "❌ Odoo service failed to start"
   journalctl -u odoo -n 20 --no-pager
   exit 1
fi

# 20. Import Odoo database if available
if [[ "$DB_CHOICE" == "1" && -n "$DB_FILE" && -f "$DB_FILE" ]]; then
   print_status "Importing pre-configured database backup..."
   print_status "This may take several minutes for large databases..."
   
   # Stop Odoo service during database import
   systemctl stop odoo 2>/dev/null || true
   
   # Create database with proper encoding
   su - postgres -c "dropdb odoo_db" 2>/dev/null || true
   su - postgres -c "createdb -O odoo18e -E UTF8 -l C.UTF-8 -T template0 odoo_db"
   
   # Set temporary optimizations for faster import
   su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET synchronous_commit = OFF;\""
   su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET fsync = OFF;\""
   su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db SET maintenance_work_mem = '512MB';\""
   
   # Import based on file extension
   if [[ "$DB_FILE" == *.sql ]]; then
       print_status "Importing SQL dump..."
       timeout 7200 su - postgres -c "psql -d odoo_db -f \"$DB_FILE\" -v ON_ERROR_STOP=0" || {
           print_warning "SQL import completed with some warnings"
       }
   elif [[ "$DB_FILE" == *.dump || "$DB_FILE" == *.backup ]]; then
       print_status "Importing PostgreSQL dump..."
       timeout 7200 su - postgres -c "pg_restore -d odoo_db \"$DB_FILE\" --verbose --no-owner --no-privileges --clean --if-exists" || {
           print_warning "Dump import completed with some warnings"
       }
   fi
   
   # Restore normal database settings
   su - postgres -c "psql -d odoo_db -c \"ALTER DATABASE odoo_db RESET ALL;\""
   
   # Fix ownership and permissions
   print_status "Fixing database ownership and permissions..."
   su - postgres -c "psql -d odoo_db -c \"REASSIGN OWNED BY postgres TO odoo18e;\""
   su - postgres -c "psql -d odoo_db -c \"GRANT ALL PRIVILEGES ON DATABASE odoo_db TO odoo18e;\""
   
   # Update system parameters
   print_status "Updating system parameters..."
   su - postgres -c "psql -d odoo_db -c \"UPDATE ir_config_parameter SET value = 'https://$ERP_DOMAIN' WHERE key = 'web.base.url';\""
   
   # Reset admin password
   su - postgres -c "psql -d odoo_db -c \"UPDATE res_users SET password = '\\\$pbkdf2-sha512\\\$25000\\\$LQ9.v9zUmpbSGjH2nqPS2g\\\$LeLqocCO6rXPCpqfwSrMR2ckX3Lfj6Ln9qGk2E.GdE1V8bk6VmN2nTc6Zq5KzlKn.xLpwB5VjLU2LLKklPKlKn' WHERE login = 'admin';\""
   
   # Clear sessions
   su - postgres -c "psql -d odoo_db -c \"DELETE FROM ir_sessions;\""
   
   # Optimize database
   su - postgres -c "psql -d odoo_db -c \"VACUUM ANALYZE;\""
   
   systemctl start odoo
   FINAL_DB_NAME="odoo_db"
else
   FINAL_DB_NAME="Will be created on first login"
fi

# 21. Setup SSL certificates
print_header "=== Step 20: Setting up SSL Certificates ==="
print_status "Waiting for services to be fully operational..."
sleep 20

# Check if services are responding
for domain in "$MAIN_DOMAIN" "$ERP_DOMAIN" "$PMA_DOMAIN"; do
   print_status "Checking $domain..."
   for i in {1..10}; do
       if curl -f -H "Host: $domain" http://localhost >/dev/null 2>&1; then
           print_status "$domain is responding"
           break
       else
           print_status "Waiting for $domain... (attempt $i/10)"
           sleep 5
       fi
   done
done

# Get SSL certificates for all domains
print_status "Obtaining SSL certificates for all domains..."
certbot --nginx -d "$MAIN_DOMAIN" -d "$ERP_DOMAIN" -d "$PMA_DOMAIN" \
   --email "$SSL_EMAIL" --agree-tos --non-interactive --redirect

if [ $? -eq 0 ]; then
   print_success "SSL certificates obtained successfully for all domains!"
   
   # Add security headers for HTTPS
   for site in wordpress odoo phpmyadmin; do
       if [ -f "/etc/nginx/sites-available/$site" ]; then
           # Add HSTS header if not present
           if ! grep -q "Strict-Transport-Security" /etc/nginx/sites-available/$site; then
               sed -i '/ssl_certificate/a\    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;' /etc/nginx/sites-available/$site
           fi
       fi
   done
   
   systemctl reload nginx
   
   # Setup auto-renewal
   systemctl enable certbot.timer
   systemctl start certbot.timer
else
   print_warning "SSL certificate setup failed. You can try manually later."
fi

# 22. Install WordPress plugins for optimization
print_header "=== Step 21: Installing WordPress Optimization Plugins ==="
cd /var/www/wordpress

# Download and install Redis Object Cache plugin
print_status "Installing Redis Object Cache plugin..."
wp plugin install redis-cache --allow-root
wp plugin activate redis-cache --allow-root
wp redis enable --allow-root

# Download and install other essential plugins
print_status "Installing essential WordPress plugins..."
wp plugin install w3-total-cache --allow-root
wp plugin install wp-super-cache --allow-root
wp plugin install autoptimize --allow-root
wp plugin install ewww-image-optimizer --allow-root

# 23. Configure firewall
print_header "=== Step 22: Configuring Firewall ==="
ufw --force enable
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 8069/tcp

# Configure fail2ban
print_status "Configuring fail2ban..."
cat > /etc/fail2ban/jail.local <<EOL
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 5

[nginx-http-auth]
enabled = true

[nginx-limit-req]
enabled = true

[php-url-fopen]
enabled = true

[wordpress]
enabled = true
filter = wordpress
logpath = /var/log/nginx/access.log
maxretry = 3
bantime = 3600
EOL

systemctl restart fail2ban
systemctl enable fail2ban

# 24. Create maintenance scripts
print_header "=== Step 23: Creating Maintenance Scripts ==="

# Odoo backup script
cat > /opt/odoo18-enterprise/backup.sh <<EOL
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
su - postgres -c "pg_dump -Fc odoo_db" > /opt/odoo18-enterprise/backups/backup_\$DATE.dump
find /opt/odoo18-enterprise/backups -name "*.dump" -mtime +7 -delete
echo "Odoo backup completed: backup_\$DATE.dump"
EOL

chmod +x /opt/odoo18-enterprise/backup.sh
chown odoo:odoo /opt/odoo18-enterprise/backup.sh

# WordPress backup script
cat > /var/www/backup_wordpress.sh <<EOL
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/var/backups/wordpress"
mkdir -p \$BACKUP_DIR

# Backup files
tar -czf \$BACKUP_DIR/wordpress_files_\$DATE.tar.gz -C /var/www wordpress

# Backup database
mysqldump -u wordpress -pwp_pass123 wordpress > \$BACKUP_DIR/wordpress_db_\$DATE.sql
gzip \$BACKUP_DIR/wordpress_db_\$DATE.sql

# Remove old backups (keep 7 days)
find \$BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete
find \$BACKUP_DIR -name "*.sql.gz" -mtime +7 -delete

echo "WordPress backup completed: files and database saved to \$BACKUP_DIR"
EOL

chmod +x /var/www/backup_wordpress.sh

# Create cron jobs for backups
cat > /tmp/crontab_backups <<EOL
# Odoo backup daily at 2 AM
0 2 * * * /opt/odoo18-enterprise/backup.sh

# WordPress backup daily at 3 AM  
0 3 * * * /var/www/backup_wordpress.sh

# SSL renewal check daily
0 1 * * * certbot renew --quiet
EOL

crontab /tmp/crontab_backups
rm /tmp/crontab_backups

# 25. Create system monitoring script
cat > /usr/local/bin/system_status.sh <<EOL
#!/bin/bash
echo "=== System Status ==="
echo "Date: \$(date)"
echo ""

echo "=== Services Status ==="
systemctl status nginx --no-pager -l | grep "Active:"
systemctl status mariadb --no-pager -l | grep "Active:"
systemctl status postgresql --no-pager -l | grep "Active:"
systemctl status redis-server --no-pager -l | grep "Active:"
systemctl status php$PHP_VERSION-fpm --no-pager -l | grep "Active:"
systemctl status odoo --no-pager -l | grep "Active:"
echo ""

echo "=== Database Connections ==="
if mysql -uwordpress -pwp_pass123 -e "SELECT 'WordPress DB: Connected' as status;" 2>/dev/null; then
   echo "✅ WordPress Database: Connected"
else
   echo "❌ WordPress Database: Failed"
fi

if su - postgres -c "psql -c \"SELECT 'PostgreSQL: Connected' as status;\"" 2>/dev/null | grep -q "Connected"; then
   echo "✅ PostgreSQL: Connected"
else
   echo "❌ PostgreSQL: Failed"
fi
echo ""

echo "=== Web Services ==="
if curl -f http://localhost:8069 >/dev/null 2>&1; then
   echo "✅ Odoo: Accessible"
else
   echo "❌ Odoo: Not accessible"
fi

if curl -f http://localhost >/dev/null 2>&1; then
   echo "✅ Nginx: Serving content"
else
   echo "❌ Nginx: Not responding"
fi

if redis-cli ping >/dev/null 2>&1; then
   echo "✅ Redis: Responding"
else
   echo "❌ Redis: Not responding"
fi
echo ""

echo "=== Disk Usage ==="
df -h | grep -E "(Filesystem|/dev/)"
echo ""
echo "=== Memory Usage ==="
free -h
echo ""
echo "=== SSL Certificates ==="
certbot certificates
EOL

chmod +x /usr/local/bin/system_status.sh

# 26. Final comprehensive status check and service verification
print_header "=== Step 24: Final Comprehensive Status Check ==="

# Wait for all services to stabilize
sleep 15

print_status "Performing comprehensive service verification..."

# Database connection tests
print_status "=== Database Connection Tests ==="

# Test MariaDB/WordPress connection
if mysql -uwordpress -pwp_pass123 -e "SELECT 'WordPress DB Connected' as status;" 2>/dev/null; then
   print_success "✅ WordPress database connection works"
else
   print_error "❌ WordPress database connection failed"
   
   # Try to fix MariaDB issues
   print_status "Attempting to fix MariaDB connection..."
   systemctl restart mariadb
   sleep 10
   
   if mysql -uwordpress -pwp_pass123 -e "SELECT 1;" >/dev/null 2>&1; then
       print_success "✅ WordPress database connection fixed"
   else
       print_error "❌ WordPress database still failing"
   fi
fi

# Test PostgreSQL connection
if su - postgres -c "psql -c \"SELECT 'PostgreSQL Connected' as status;\"" 2>/dev/null; then
   print_success "✅ PostgreSQL connection works"
else
   print_error "❌ PostgreSQL connection failed"
   systemctl restart postgresql
   sleep 10
fi

# Service status verification
print_status "=== Service Status Verification ==="

services=("postgresql" "mariadb" "odoo" "nginx" "redis-server" "php$PHP_VERSION-fpm")
all_services_ok=true

for service in "${services[@]}"; do
   if systemctl is-active --quiet $service; then
       print_success "✅ $service is running"
   else
       print_error "❌ $service is not running"
       all_services_ok=false
       
       # Try to restart failed services
       print_status "Attempting to restart $service..."
       systemctl restart $service
       sleep 5
       
       if systemctl is-active --quiet $service; then
           print_success "✅ $service restarted successfully"
       else
           print_error "❌ $service restart failed"
       fi
   fi
done

# Web interface tests
print_status "=== Web Interface Tests ==="

# Test Odoo web interface
sleep 10
for i in {1..5}; do
   if curl -f http://localhost:8069 >/dev/null 2>&1; then
       print_success "✅ Odoo web interface accessible"
       break
   else
       print_warning "⚠️ Odoo web interface not accessible (attempt $i/5)"
       if [ $i -eq 5 ]; then
           print_error "❌ Odoo web interface failed after 5 attempts"
           print_status "Checking Odoo logs:"
           journalctl -u odoo -n 20 --no-pager
       else
           sleep 10
       fi
   fi
done

# Test Redis
if redis-cli ping >/dev/null 2>&1; then
   print_success "✅ Redis is responding"
else
   print_warning "⚠️ Redis not responding"
   systemctl restart redis-server
fi

# Test Nginx
if curl -f http://localhost >/dev/null 2>&1; then
   print_success "✅ Nginx is serving content"
else
   print_error "❌ Nginx not responding"
   nginx -t && systemctl restart nginx
fi

# 27. Final installation summary
print_header "=== INSTALLATION COMPLETED SUCCESSFULLY ==="

print_success "🎉 Installation Complete!"
echo ""
print_header "📱 Access Information:"

# Check HTTPS access
if curl -k -f https://$MAIN_DOMAIN >/dev/null 2>&1; then
   print_success "✅ WordPress: https://$MAIN_DOMAIN"
else
   print_warning "⚠️  WordPress: http://$MAIN_DOMAIN (SSL pending)"
fi

if curl -k -f https://$ERP_DOMAIN >/dev/null 2>&1; then
   print_success "✅ Odoo: https://$ERP_DOMAIN"
else
   print_warning "⚠️  Odoo: http://$ERP_DOMAIN (SSL pending)"
fi

if curl -k -f https://$PMA_DOMAIN >/dev/null 2>&1; then
   print_success "✅ phpMyAdmin: https://$PMA_DOMAIN"
else
   print_warning "⚠️  phpMyAdmin: http://$PMA_DOMAIN (SSL pending)"
fi

echo ""
print_header "🔐 Login Credentials:"
echo ""
print_status "📊 Odoo 18 Enterprise:"
print_status "   👤 Username: admin"
print_status "   🔑 Password: admin"
print_status "   🗄️ Database: $FINAL_DB_NAME"
echo ""
print_status "🌐 WordPress:"
print_status "   🔗 Setup: https://$MAIN_DOMAIN/wp-admin/install.php"
print_status "   🗄️ Database: wordpress"
print_status "   👤 DB User: wordpress"
print_status "   🔑 DB Pass: wp_pass123"
echo ""
print_status "🛠️ phpMyAdmin:"
print_status "   👤 Username: root"
print_status "   🔑 Password: mysql_root_pass123"
echo ""
print_header "💾 Database Information:"
print_status "   🐘 PostgreSQL (Odoo): odoo18e / odoo123"
print_status "   🐬 MariaDB (WordPress): wordpress / wp_pass123"
print_status "   🔴 Redis: localhost:6379"
echo ""
print_header "📂 Important Paths:"
print_status "   📁 Odoo: /opt/odoo18-enterprise/odoo"
print_status "   📁 WordPress: /var/www/wordpress"
print_status "   📁 phpMyAdmin: /var/www/phpmyadmin"
print_status "   📁 Nginx Config: /etc/nginx/sites-available/"
print_status "   📁 Odoo Logs: /var/log/odoo/odoo.log"
print_status "   📁 Nginx Logs: /var/log/nginx/"
print_status "   📁 Odoo Config: /etc/odoo/odoo.conf"
echo ""
print_header "🔧 Useful Commands:"
print_status "   /usr/local/bin/system_status.sh"
print_status "   systemctl status nginx mariadb postgresql odoo"
print_status "   systemctl restart odoo"
print_status "   wp --help --allow-root"
print_status "   tail -f /var/log/odoo/odoo.log"
print_status "   journalctl -u odoo -f"
echo ""
print_header "🔒 Security Features:"
print_status "   ✅ SSL Certificates (Auto-renewal enabled)"
print_status "   ✅ Firewall (UFW) configured"
print_status "   ✅ Fail2ban protection active"
print_status "   ✅ Rate limiting configured"
print_status "   ✅ Security headers enabled"
print_status "   ✅ Database connections secured"
echo ""
print_header "⚡ Performance Features:"
print_status "   ✅ Redis caching for WordPress"
print_status "   ✅ Nginx FastCGI cache"
print_status "   ✅ PHP OPcache enabled"
print_status "   ✅ MariaDB query cache"
print_status "   ✅ Gzip compression"
print_status "   ✅ Static file caching"
echo ""
print_header "🔄 Automated Backups:"
print_status "   📅 Odoo backup: Daily at 2:00 AM"
print_status "   📅 WordPress backup: Daily at 3:00 AM"
print_status "   📅 SSL renewal check: Daily at 1:00 AM"
echo ""
print_header "🛠️ Troubleshooting:"
print_status "   📋 System status: /usr/local/bin/system_status.sh"
print_status "   📋 Odoo logs: journalctl -u odoo -f"
print_status "   📋 Nginx logs: tail -f /var/log/nginx/error.log"
print_status "   📋 Database test: mysql -uwordpress -pwp_pass123 -e 'SELECT 1;'"
echo ""

# Final service verification
if systemctl is-active --quiet nginx && systemctl is-active --quiet mariadb && systemctl is-active --quiet postgresql && systemctl is-active --quiet odoo; then
   print_success "🎉 All critical services are running successfully!"
   print_status ""
   print_success "🚀 Installation completed successfully with all fixes applied!"
   print_status "📖 Run '/usr/local/bin/system_status.sh' anytime to check system status"
   echo ""
   print_header "🔍 Post-Installation Verification:"
   print_status "   1. Visit your Odoo URL to verify web interface"
   print_status "   2. Complete WordPress setup via /wp-admin/install.php"
   print_status "   3. Access phpMyAdmin to verify database management"
   print_status "   4. Run system_status.sh to monitor all services"
   echo ""
   print_success "✨ Your Odoo 18 Enterprise + WordPress installation is ready!"
else
   print_warning "⚠️  Some services may need attention. Run the system status check:"
   print_status "/usr/local/bin/system_status.sh"
   
   # Show which services need attention
   print_status ""
   print_status "Service Status Summary:"
   systemctl is-active --quiet nginx && echo "✅ Nginx" || echo "❌ Nginx"
   systemctl is-active --quiet mariadb && echo "✅ MariaDB" || echo "❌ MariaDB"
   systemctl is-active --quiet postgresql && echo "✅ PostgreSQL" || echo "❌ PostgreSQL" 
   systemctl is-active --quiet odoo && echo "✅ Odoo" || echo "❌ Odoo"
   systemctl is-active --quiet redis-server && echo "✅ Redis" || echo "❌ Redis"
fi

# Re-enable unattended upgrades if desired
print_question "Would you like to re-enable automatic updates? (y/n):"
read -p "Choice: " ENABLE_AUTO_UPDATES

if [[ "$ENABLE_AUTO_UPDATES" =~ ^[Yy]$ ]]; then
   systemctl enable unattended-upgrades
   systemctl start unattended-upgrades
   print_success "✅ Automatic updates re-enabled"
else
   print_status "📝 Automatic updates remain disabled"
fi

EOF

chmod +x complete_odoo18_wordpress_install_fixed_v2.sh
./complete_odoo18_wordpress_install_fixed_v2.sh
