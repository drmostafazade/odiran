print_status "✅ Nginx started successfully"
else
   print_error "❌ Nginx configuration failed"
   nginx -t
   exit 1
fi

# Verify Nginx is running
if ! systemctl is-active --quiet nginx; then
   print_error "❌ Nginx failed to start"
   systemctl status nginx
   exit 1
fi

print_status "✅ Nginx configuration completed"

#==========================================
# STEP 4: SSL CERTIFICATES
#==========================================

print_status "=== STEP 4: Setting up SSL certificates ==="

# Wait for services to be ready
print_status "Waiting for services to be ready..."
sleep 15

# Check if services are responding
print_status "Checking service availability..."
for i in {1..10}; do
   if curl -f http://localhost:8069 >/dev/null 2>&1 && curl -f http://localhost >/dev/null 2>&1; then
       print_status "✅ Services are responding"
       break
   else
       print_status "Waiting for services... (attempt $i/10)"
       sleep 10
   fi
done

# Setup SSL for WordPress
print_status "Setting up SSL for WordPress ($MAIN_DOMAIN)..."
certbot --nginx -d "$MAIN_DOMAIN" -d "www.$MAIN_DOMAIN" --email "$SSL_EMAIL" --agree-tos --non-interactive --redirect --no-eff-email

if [ $? -eq 0 ]; then
   print_status "✅ SSL certificate obtained for WordPress"
else
   print_warning "SSL setup failed for WordPress - you can set it up manually later with:"
   print_warning "certbot --nginx -d $MAIN_DOMAIN -d www.$MAIN_DOMAIN"
fi

# Setup SSL for Odoo
print_status "Setting up SSL for Odoo ($ERP_SUBDOMAIN)..."
certbot --nginx -d "$ERP_SUBDOMAIN" --email "$SSL_EMAIL" --agree-tos --non-interactive --redirect --no-eff-email

if [ $? -eq 0 ]; then
   print_status "✅ SSL certificate obtained for Odoo"
else
   print_warning "SSL setup failed for Odoo - you can set it up manually later with:"
   print_warning "certbot --nginx -d $ERP_SUBDOMAIN"
fi

# Enable SSL auto-renewal
systemctl enable certbot.timer
systemctl start certbot.timer
print_status "✅ SSL auto-renewal configured"

# Reload Nginx after SSL setup
systemctl reload nginx

#==========================================
# STEP 5: FIREWALL CONFIGURATION
#==========================================

print_status "=== STEP 5: Configuring Firewall ==="

# Configure UFW firewall
ufw --force enable
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 8069/tcp

print_status "✅ Firewall configured"

#==========================================
# STEP 6: BACKUP SCRIPTS
#==========================================

print_status "=== STEP 6: Creating Backup Scripts ==="

# Create WordPress backup script
cat > /var/www/wordpress_backup.sh <<EOL
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/var/www/backups"
mkdir -p \$BACKUP_DIR

# WordPress database backup
mysqldump -u '$WP_DB_USER' -p'$WP_DB_PASS' '$WP_DB_NAME' | gzip > \$BACKUP_DIR/wp_db_\$DATE.sql.gz

# WordPress files backup
tar czf \$BACKUP_DIR/wp_files_\$DATE.tar.gz -C /var/www/$MAIN_DOMAIN .

# Clean old backups (keep 7 days)
find \$BACKUP_DIR -name "wp_*" -mtime +7 -delete

# Log backup
echo "\$DATE: WordPress backup completed" >> \$BACKUP_DIR/backup.log

echo "WordPress backup completed: \$DATE"
EOL

chmod +x /var/www/wordpress_backup.sh

# Create Odoo backup script
cat > /opt/odoo18-enterprise/odoo_backup.sh <<EOL
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/opt/odoo18-enterprise/backups"
mkdir -p \$BACKUP_DIR

# Check if database exists and backup
if su - postgres -c "psql -lqt" | cut -d \| -f 1 | grep -qw odoo_db; then
   su - postgres -c "pg_dump -Fc odoo_db" > \$BACKUP_DIR/odoo_db_\$DATE.dump
   echo "\$DATE: Odoo database backup completed" >> \$BACKUP_DIR/backup.log
else
   echo "\$DATE: No Odoo database found to backup" >> \$BACKUP_DIR/backup.log
fi

# Clean old backups (keep 7 days)
find \$BACKUP_DIR -name "odoo_db_*.dump" -mtime +7 -delete

echo "Odoo backup completed: \$DATE"
EOL

chmod +x /opt/odoo18-enterprise/odoo_backup.sh
chown odoo:odoo /opt/odoo18-enterprise/odoo_backup.sh

# Setup cron jobs for daily backups
print_status "Setting up daily backup cron jobs..."
(crontab -l 2>/dev/null; echo "0 1 * * * /var/www/wordpress_backup.sh") | crontab -
(crontab -l 2>/dev/null; echo "0 2 * * * /opt/odoo18-enterprise/odoo_backup.sh") | crontab -

print_status "✅ Backup scripts created and scheduled"

#==========================================
# STEP 7: INSTALL WP-CLI
#==========================================

print_status "=== STEP 7: Installing WP-CLI ==="

cd /tmp
curl -O https://raw.githubusercontent.com/wp-cli/wp-cli/main/wp-cli.phar 2>/dev/null || wget -q https://raw.githubusercontent.com/wp-cli/wp-cli/main/wp-cli.phar
chmod +x wp-cli.phar
mv wp-cli.phar /usr/local/bin/wp

print_status "✅ WP-CLI installed"

#==========================================
# STEP 8: SAVE CREDENTIALS
#==========================================

print_status "=== STEP 8: Saving Installation Credentials ==="

cat > /root/complete_installation_credentials.txt <<EOL
========================================
COMPLETE INSTALLATION CREDENTIALS
========================================
Installation Date: $(date)
Server IP: $(curl -s ifconfig.me 2>/dev/null || echo "Unknown")

📱 ACCESS INFORMATION:
========================================
🌐 WordPress:
- URL: https://$MAIN_DOMAIN
- Admin URL: https://$MAIN_DOMAIN/wp-admin
- Complete the 5-minute WordPress setup

🏢 Odoo ERP:
- URL: https://$ERP_SUBDOMAIN
- Username: admin
- Password: admin
- Master Password: 5011700

🗄️ DATABASE CREDENTIALS:
========================================
WordPress Database:
- Database Name: $WP_DB_NAME
- Database User: $WP_DB_USER
- Database Password: $WP_DB_PASS
- MySQL Root Password: $MYSQL_ROOT_PASS

Odoo Database:
- PostgreSQL User: odoo18e
- PostgreSQL Password: odoo123

📂 FILE LOCATIONS:
========================================
WordPress:
- Directory: /var/www/$MAIN_DOMAIN
- Config: /var/www/$MAIN_DOMAIN/wp-config.php
- Backup Script: /var/www/wordpress_backup.sh
- PHP Version: $PHP_VERSION

Odoo:
- Directory: /opt/odoo18-enterprise/odoo
- Custom Addons: /opt/odoo18-enterprise/addons_manatra
- Config: /etc/odoo/odoo.conf
- Logs: /var/log/odoo/odoo.log
- Backup Script: /opt/odoo18-enterprise/odoo_backup.sh

System:
- Nginx Configs: /etc/nginx/sites-available/
- SSL Certificates: Auto-renewal enabled
- Firewall: UFW enabled

🔧 USEFUL COMMANDS:
========================================
WordPress:
- wp --path=/var/www/$MAIN_DOMAIN <command>
- systemctl restart php$PHP_VERSION-fpm
- /var/www/wordpress_backup.sh

Odoo:
- systemctl restart odoo
- systemctl status odoo
- tail -f /var/log/odoo/odoo.log
- /opt/odoo18-enterprise/odoo_backup.sh

General:
- systemctl restart nginx
- systemctl reload nginx
- nginx -t
- certbot renew --dry-run
- certbot certificates

🛡️ SECURITY FEATURES:
========================================
✅ SSL certificates with auto-renewal
✅ Firewall configured (UFW)
✅ Secure passwords generated
✅ Daily backups scheduled
✅ Security headers enabled
✅ File permissions optimized

📋 NEXT STEPS:
========================================
1. Visit https://$MAIN_DOMAIN to complete WordPress setup
2. Visit https://$ERP_SUBDOMAIN to access Odoo
3. Create your WordPress admin account
4. Configure your Odoo database (if needed)
5. Install WordPress themes and plugins as needed

⚠️ IMPORTANT NOTES:
========================================
- Save these credentials securely
- Test both services to ensure they're working
- Configure DNS if accessing from external networks
- Consider setting up regular offsite backups
- Monitor server resources and logs

EOL

chmod 600 /root/complete_installation_credentials.txt

print_status "✅ Credentials saved to /root/complete_installation_credentials.txt"

#==========================================
# FINAL STATUS CHECK
#==========================================

print_status "=== FINAL STATUS CHECK ==="

# Check all service statuses
NGINX_STATUS=$(systemctl is-active nginx 2>/dev/null || echo "inactive")
ODOO_STATUS=$(systemctl is-active odoo 2>/dev/null || echo "inactive")
PHP_STATUS=$(systemctl is-active php$PHP_VERSION-fpm 2>/dev/null || echo "inactive")
MYSQL_STATUS=$(systemctl is-active mysql 2>/dev/null || echo "inactive")
POSTGRES_STATUS=$(systemctl is-active postgresql 2>/dev/null || echo "inactive")

print_status "🔍 Service Status Check:"
print_status "  ├── Nginx: $NGINX_STATUS"
print_status "  ├── Odoo: $ODOO_STATUS"
print_status "  ├── PHP-FPM: $PHP_STATUS"
print_status "  ├── MySQL: $MYSQL_STATUS"
print_status "  └── PostgreSQL: $POSTGRES_STATUS"

# Check if sites are accessible
print_status "🌐 Connectivity Check:"
if curl -f -s -o /dev/null http://localhost; then
   print_status "  ├── WordPress (HTTP): ✅ Accessible"
else
   print_status "  ├── WordPress (HTTP): ❌ Not accessible"
fi

if curl -f -s -o /dev/null http://localhost:8069; then
   print_status "  └── Odoo (HTTP): ✅ Accessible"
else
   print_status "  └── Odoo (HTTP): ❌ Not accessible"
fi

# Check SSL certificates
print_status "🔒 SSL Certificate Check:"
if [[ -f "/etc/letsencrypt/live/$MAIN_DOMAIN/fullchain.pem" ]]; then
   print_status "  ├── WordPress SSL: ✅ Installed"
else
   print_status "  ├── WordPress SSL: ❌ Not found"
fi

if [[ -f "/etc/letsencrypt/live/$ERP_SUBDOMAIN/fullchain.pem" ]]; then
   print_status "  └── Odoo SSL: ✅ Installed"
else
   print_status "  └── Odoo SSL: ❌ Not found"
fi

# Overall success check
SUCCESS=true

if [[ "$NGINX_STATUS" != "active" || "$ODOO_STATUS" != "active" || "$PHP_STATUS" != "active" || "$MYSQL_STATUS" != "active" || "$POSTGRES_STATUS" != "active" ]]; then
   SUCCESS=false
fi

echo ""
echo "=========================================="

if [[ "$SUCCESS" == true ]]; then
   print_status "🎉 INSTALLATION COMPLETED SUCCESSFULLY! 🎉"
   echo ""
   print_status "🚀 Your services are now ready:"
   echo ""
   print_status "📱 WordPress Website:"
   print_status "   🌐 https://$MAIN_DOMAIN"
   print_status "   🛡️  Admin: https://$MAIN_DOMAIN/wp-admin"
   echo ""
   print_status "🏢 Odoo ERP System:"
   print_status "   🌐 https://$ERP_SUBDOMAIN"
   print_status "   👤 Username: admin"
   print_status "   🔑 Password: admin"
   echo ""
   print_status "📄 All credentials saved in:"
   print_status "   📁 /root/complete_installation_credentials.txt"
   echo ""
   print_status "✅ Features Enabled:"
   print_status "   🔒 SSL certificates with auto-renewal"
   print_status "   🛡️  Firewall protection"
   print_status "   💾 Daily automated backups"
   print_status "   ⚡ Performance optimizations"
   print_status "   🔐 Security hardening"
   echo ""
   print_status "🎯 Next Steps:"
   print_status "   1. Visit https://$MAIN_DOMAIN to complete WordPress setup"
   print_status "   2. Visit https://$ERP_SUBDOMAIN to start using Odoo"
   print_status "   3. Create your admin accounts"
   print_status "   4. Customize your websites as needed"
   echo ""
   print_status "🔧 Maintenance Commands:"
   print_status "   • View logs: tail -f /var/log/nginx/error.log"
   print_status "   • Restart services: systemctl restart nginx/odoo/php$PHP_VERSION-fpm"
   print_status "   • Manual backup: /var/www/wordpress_backup.sh"
   print_status "   • Check SSL: certbot certificates"
   
else
   print_error "❌ INSTALLATION COMPLETED WITH ISSUES"
   echo ""
   print_status "📋 Troubleshooting Steps:"
   print_status "   1. Check service logs:"
   print_status "      • systemctl status nginx"
   print_status "      • systemctl status odoo"
   print_status "      • systemctl status php$PHP_VERSION-fpm"
   print_status "      • systemctl status mysql"
   print_status "      • systemctl status postgresql"
   echo ""
   print_status "   2. Check error logs:"
   print_status "      • tail -f /var/log/nginx/error.log"
   print_status "      • tail -f /var/log/odoo/odoo.log"
   echo ""
   print_status "   3. Test configurations:"
   print_status "      • nginx -t"
   print_status "      • curl -I http://localhost"
   print_status "      • curl -I http://localhost:8069"
   echo ""
   print_status "📞 If you need help, provide the output of above commands"
fi

echo "=========================================="
print_status "🏁 Installation script completed!"
print_status "📅 $(date)"
echo "=========================================="

EOF

chmod +x complete_installer_fixed.sh
./complete_installer_fixed.sh
